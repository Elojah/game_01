// automatically generated by the FlatBuffers compiler, do not modify

package game

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Actor struct {
	_tab flatbuffers.Table
}

func GetRootAsActor(buf []byte, offset flatbuffers.UOffsetT) *Actor {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Actor{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Actor) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Actor) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Actor) Token(obj *Token) *Token {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Token)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Actor) Hp() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Actor) MutateHp(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *Actor) Mp() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Actor) MutateMp(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *Actor) Position(obj *Vec3) *Vec3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vec3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ActorStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ActorAddToken(builder *flatbuffers.Builder, token flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(token), 0)
}
func ActorAddHp(builder *flatbuffers.Builder, hp uint32) {
	builder.PrependUint32Slot(1, hp, 0)
}
func ActorAddMp(builder *flatbuffers.Builder, mp uint32) {
	builder.PrependUint32Slot(2, mp, 0)
}
func ActorAddPosition(builder *flatbuffers.Builder, position flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(position), 0)
}
func ActorEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

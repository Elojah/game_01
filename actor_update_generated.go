// automatically generated by the FlatBuffers compiler, do not modify

package game

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ActorSubset struct {
	_tab flatbuffers.Table
}

func GetRootAsActorSubset(buf []byte, offset flatbuffers.UOffsetT) *ActorSubset {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ActorSubset{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ActorSubset) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ActorSubset) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ActorSubset) Tokens(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ActorSubset) TokensLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ActorSubsetStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ActorSubsetAddTokens(builder *flatbuffers.Builder, tokens flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(tokens), 0)
}
func ActorSubsetStartTokensVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ActorSubsetEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type NullUint struct {
	_tab flatbuffers.Struct
}

func (rcv *NullUint) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NullUint) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *NullUint) Uint() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *NullUint) MutateUint(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func CreateNullUint(builder *flatbuffers.Builder, uint uint32) flatbuffers.UOffsetT {
	builder.Prep(4, 4)
	builder.PrependUint32(uint)
	return builder.Offset()
}
type ActorPatch struct {
	_tab flatbuffers.Table
}

func GetRootAsActorPatch(buf []byte, offset flatbuffers.UOffsetT) *ActorPatch {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ActorPatch{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ActorPatch) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ActorPatch) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ActorPatch) Addhp(obj *NullUint) *NullUint {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(NullUint)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ActorPatch) Subhp(obj *NullUint) *NullUint {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(NullUint)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ActorPatch) Addmp(obj *NullUint) *NullUint {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(NullUint)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ActorPatch) Submp(obj *NullUint) *NullUint {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(NullUint)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ActorPatch) Position(obj *Vec3) *Vec3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vec3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ActorPatchStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ActorPatchAddAddhp(builder *flatbuffers.Builder, addhp flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(addhp), 0)
}
func ActorPatchAddSubhp(builder *flatbuffers.Builder, subhp flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(subhp), 0)
}
func ActorPatchAddAddmp(builder *flatbuffers.Builder, addmp flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(addmp), 0)
}
func ActorPatchAddSubmp(builder *flatbuffers.Builder, submp flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(submp), 0)
}
func ActorPatchAddPosition(builder *flatbuffers.Builder, position flatbuffers.UOffsetT) {
	builder.PrependStructSlot(4, flatbuffers.UOffsetT(position), 0)
}
func ActorPatchEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type ActorUpdate struct {
	_tab flatbuffers.Table
}

func GetRootAsActorUpdate(buf []byte, offset flatbuffers.UOffsetT) *ActorUpdate {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ActorUpdate{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ActorUpdate) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ActorUpdate) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ActorUpdate) Auth() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ActorUpdate) Subset(obj *ActorSubset) *ActorSubset {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ActorSubset)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ActorUpdate) Patch(obj *ActorPatch) *ActorPatch {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ActorPatch)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ActorUpdateStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ActorUpdateAddAuth(builder *flatbuffers.Builder, auth flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(auth), 0)
}
func ActorUpdateAddSubset(builder *flatbuffers.Builder, subset flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(subset), 0)
}
func ActorUpdateAddPatch(builder *flatbuffers.Builder, patch flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(patch), 0)
}
func ActorUpdateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

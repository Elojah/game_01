// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: item.proto

package item

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import geometry "github.com/elojah/game_01/pkg/geometry"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_elojah_game_01_pkg_ulid "github.com/elojah/game_01/pkg/ulid"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type I struct {
	ID       github_com_elojah_game_01_pkg_ulid.ID  `protobuf:"bytes,1,opt,name=ID,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"ID"`
	Type     github_com_elojah_game_01_pkg_ulid.ID  `protobuf:"bytes,2,opt,name=Type,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"Type"`
	Name     string                                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Owner    github_com_elojah_game_01_pkg_ulid.ID  `protobuf:"bytes,4,opt,name=Owner,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"Owner"`
	Position *geometry.Position                     `protobuf:"bytes,5,opt,name=Position" json:"Position,omitempty"`
	Skill    *github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,6,opt,name=Skill,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"Skill,omitempty"`
}

func (m *I) Reset()      { *m = I{} }
func (*I) ProtoMessage() {}
func (*I) Descriptor() ([]byte, []int) {
	return fileDescriptor_item_7ab6a55cea5782d4, []int{0}
}
func (m *I) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *I) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_I.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *I) XXX_Merge(src proto.Message) {
	xxx_messageInfo_I.Merge(dst, src)
}
func (m *I) XXX_Size() int {
	return m.Size()
}
func (m *I) XXX_DiscardUnknown() {
	xxx_messageInfo_I.DiscardUnknown(m)
}

var xxx_messageInfo_I proto.InternalMessageInfo

func (m *I) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *I) GetPosition() *geometry.Position {
	if m != nil {
		return m.Position
	}
	return nil
}

func init() {
	proto.RegisterType((*I)(nil), "item.I")
}
func (this *I) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*I)
	if !ok {
		that2, ok := that.(I)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.Type.Equal(that1.Type) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Owner.Equal(that1.Owner) {
		return false
	}
	if !this.Position.Equal(that1.Position) {
		return false
	}
	if that1.Skill == nil {
		if this.Skill != nil {
			return false
		}
	} else if !this.Skill.Equal(*that1.Skill) {
		return false
	}
	return true
}
func (this *I) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&item.I{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Owner: "+fmt.Sprintf("%#v", this.Owner)+",\n")
	if this.Position != nil {
		s = append(s, "Position: "+fmt.Sprintf("%#v", this.Position)+",\n")
	}
	s = append(s, "Skill: "+fmt.Sprintf("%#v", this.Skill)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringItem(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *I) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *I) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintItem(dAtA, i, uint64(m.ID.Size()))
	n1, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintItem(dAtA, i, uint64(m.Type.Size()))
	n2, err := m.Type.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintItem(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintItem(dAtA, i, uint64(m.Owner.Size()))
	n3, err := m.Owner.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.Position != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintItem(dAtA, i, uint64(m.Position.Size()))
		n4, err := m.Position.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Skill != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintItem(dAtA, i, uint64(m.Skill.Size()))
		n5, err := m.Skill.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func encodeVarintItem(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedI(r randyItem, easy bool) *I {
	this := &I{}
	v1 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.ID = *v1
	v2 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.Type = *v2
	this.Name = string(randStringItem(r))
	v3 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.Owner = *v3
	if r.Intn(10) != 0 {
		this.Position = geometry.NewPopulatedPosition(r, easy)
	}
	this.Skill = github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyItem interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneItem(r randyItem) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringItem(r randyItem) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneItem(r)
	}
	return string(tmps)
}
func randUnrecognizedItem(r randyItem, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldItem(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldItem(dAtA []byte, r randyItem, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateItem(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateItem(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateItem(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateItem(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateItem(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateItem(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateItem(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *I) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovItem(uint64(l))
	l = m.Type.Size()
	n += 1 + l + sovItem(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovItem(uint64(l))
	}
	l = m.Owner.Size()
	n += 1 + l + sovItem(uint64(l))
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovItem(uint64(l))
	}
	if m.Skill != nil {
		l = m.Skill.Size()
		n += 1 + l + sovItem(uint64(l))
	}
	return n
}

func sovItem(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozItem(x uint64) (n int) {
	return sovItem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *I) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&I{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Owner:` + fmt.Sprintf("%v", this.Owner) + `,`,
		`Position:` + strings.Replace(fmt.Sprintf("%v", this.Position), "Position", "geometry.Position", 1) + `,`,
		`Skill:` + fmt.Sprintf("%v", this.Skill) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringItem(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *I) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: I: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: I: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &geometry.Position{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skill", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthItem
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_elojah_game_01_pkg_ulid.ID
			m.Skill = &v
			if err := m.Skill.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthItem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipItem(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowItem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthItem
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowItem
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipItem(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthItem = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowItem   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("item.proto", fileDescriptor_item_7ab6a55cea5782d4) }

var fileDescriptor_item_7ab6a55cea5782d4 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x3f, 0x4f, 0x02, 0x41,
	0x10, 0xc5, 0x77, 0xce, 0x83, 0xe8, 0x6a, 0xb5, 0xd5, 0x85, 0x62, 0x20, 0x26, 0x26, 0x34, 0xdc,
	0xfa, 0xb7, 0x34, 0x51, 0xa4, 0xb9, 0x46, 0x0d, 0xda, 0x1b, 0xd0, 0x75, 0x59, 0xb9, 0x63, 0x2f,
	0x78, 0xc4, 0xd0, 0xf9, 0x11, 0xfc, 0x18, 0x7e, 0x04, 0x4b, 0x4b, 0x4a, 0x4a, 0xb4, 0x20, 0xde,
	0xd2, 0x58, 0x52, 0x5a, 0x1a, 0xf6, 0x84, 0x58, 0x99, 0x48, 0xf7, 0x26, 0xf3, 0x7e, 0xef, 0x65,
	0x77, 0x28, 0x55, 0x89, 0x88, 0xfc, 0xb8, 0xab, 0x13, 0xcd, 0xdc, 0x99, 0x2e, 0x54, 0xa4, 0x4a,
	0x5a, 0xbd, 0xa6, 0x7f, 0xad, 0x23, 0x2e, 0xb5, 0xd4, 0xdc, 0x2e, 0x9b, 0xbd, 0x5b, 0x3b, 0xd9,
	0xc1, 0xaa, 0x0c, 0x2a, 0x1c, 0xfc, 0xb2, 0x8b, 0x50, 0xdf, 0x35, 0x5a, 0x5c, 0x36, 0x22, 0x71,
	0xb5, 0xbd, 0xc3, 0xe3, 0xb6, 0xe4, 0x52, 0xe8, 0x48, 0x24, 0xdd, 0x3e, 0x8f, 0xf5, 0xbd, 0x4a,
	0x94, 0xee, 0x64, 0xd8, 0xe6, 0x9b, 0x43, 0x21, 0x60, 0x87, 0xd4, 0x09, 0x6a, 0x1e, 0x94, 0xa0,
	0xbc, 0x51, 0xad, 0x0c, 0xc6, 0x45, 0xf2, 0x3e, 0x2e, 0x6e, 0xfd, 0x1d, 0xd8, 0x0b, 0xd5, 0x8d,
	0x1f, 0xd4, 0xea, 0x4e, 0x50, 0x63, 0xc7, 0xd4, 0xbd, 0xec, 0xc7, 0xc2, 0x73, 0x96, 0x09, 0xb0,
	0x28, 0x63, 0xd4, 0x3d, 0x6d, 0x44, 0xc2, 0x5b, 0x29, 0x41, 0x79, 0xad, 0x6e, 0x35, 0x3b, 0xa1,
	0xb9, 0xb3, 0x87, 0x8e, 0xe8, 0x7a, 0xee, 0x32, 0xb9, 0x19, 0xcb, 0xf6, 0xe9, 0xea, 0xf9, 0xcf,
	0x93, 0xbd, 0x5c, 0x09, 0xca, 0xeb, 0xbb, 0xcc, 0x9f, 0x7f, 0x86, 0x3f, 0xdf, 0x54, 0xdd, 0xc1,
	0xb8, 0x08, 0xf5, 0x85, 0x73, 0x56, 0x7d, 0xd1, 0x56, 0x61, 0xe8, 0xe5, 0x17, 0xd5, 0xf0, 0x8f,
	0x6a, 0xcb, 0x56, 0x8f, 0x86, 0x29, 0x92, 0x51, 0x8a, 0x64, 0x9a, 0x22, 0x7c, 0xa5, 0x08, 0x8f,
	0x06, 0xe1, 0xd9, 0x20, 0xbc, 0x18, 0x84, 0x57, 0x83, 0x30, 0x30, 0x08, 0x43, 0x83, 0xf0, 0x61,
	0x10, 0x3e, 0x0d, 0x92, 0xa9, 0x41, 0x78, 0x9a, 0x20, 0x19, 0x4e, 0x90, 0x8c, 0x26, 0x48, 0x9a,
	0x79, 0x7b, 0xa4, 0xbd, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x59, 0x20, 0x7f, 0x1e, 0x02,
	0x00, 0x00,
}

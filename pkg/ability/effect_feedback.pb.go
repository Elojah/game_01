// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: effect_feedback.proto

package ability

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type HealFeedback struct {
	Amount               uint64   `protobuf:"varint,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealFeedback) Reset()      { *m = HealFeedback{} }
func (*HealFeedback) ProtoMessage() {}
func (*HealFeedback) Descriptor() ([]byte, []int) {
	return fileDescriptor_effect_feedback_14e22f356a639c7d, []int{0}
}
func (m *HealFeedback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealFeedback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealFeedback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HealFeedback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealFeedback.Merge(dst, src)
}
func (m *HealFeedback) XXX_Size() int {
	return m.Size()
}
func (m *HealFeedback) XXX_DiscardUnknown() {
	xxx_messageInfo_HealFeedback.DiscardUnknown(m)
}

var xxx_messageInfo_HealFeedback proto.InternalMessageInfo

func (m *HealFeedback) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type DamageFeedback struct {
	Amount               uint64   `protobuf:"varint,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DamageFeedback) Reset()      { *m = DamageFeedback{} }
func (*DamageFeedback) ProtoMessage() {}
func (*DamageFeedback) Descriptor() ([]byte, []int) {
	return fileDescriptor_effect_feedback_14e22f356a639c7d, []int{1}
}
func (m *DamageFeedback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DamageFeedback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DamageFeedback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DamageFeedback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DamageFeedback.Merge(dst, src)
}
func (m *DamageFeedback) XXX_Size() int {
	return m.Size()
}
func (m *DamageFeedback) XXX_DiscardUnknown() {
	xxx_messageInfo_DamageFeedback.DiscardUnknown(m)
}

var xxx_messageInfo_DamageFeedback proto.InternalMessageInfo

func (m *DamageFeedback) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type HealOverTimeFeedback struct {
	Amount               uint64   `protobuf:"varint,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealOverTimeFeedback) Reset()      { *m = HealOverTimeFeedback{} }
func (*HealOverTimeFeedback) ProtoMessage() {}
func (*HealOverTimeFeedback) Descriptor() ([]byte, []int) {
	return fileDescriptor_effect_feedback_14e22f356a639c7d, []int{2}
}
func (m *HealOverTimeFeedback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealOverTimeFeedback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealOverTimeFeedback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HealOverTimeFeedback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealOverTimeFeedback.Merge(dst, src)
}
func (m *HealOverTimeFeedback) XXX_Size() int {
	return m.Size()
}
func (m *HealOverTimeFeedback) XXX_DiscardUnknown() {
	xxx_messageInfo_HealOverTimeFeedback.DiscardUnknown(m)
}

var xxx_messageInfo_HealOverTimeFeedback proto.InternalMessageInfo

func (m *HealOverTimeFeedback) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type DamageOverTimeFeedback struct {
	Amount               uint64   `protobuf:"varint,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DamageOverTimeFeedback) Reset()      { *m = DamageOverTimeFeedback{} }
func (*DamageOverTimeFeedback) ProtoMessage() {}
func (*DamageOverTimeFeedback) Descriptor() ([]byte, []int) {
	return fileDescriptor_effect_feedback_14e22f356a639c7d, []int{3}
}
func (m *DamageOverTimeFeedback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DamageOverTimeFeedback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DamageOverTimeFeedback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DamageOverTimeFeedback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DamageOverTimeFeedback.Merge(dst, src)
}
func (m *DamageOverTimeFeedback) XXX_Size() int {
	return m.Size()
}
func (m *DamageOverTimeFeedback) XXX_DiscardUnknown() {
	xxx_messageInfo_DamageOverTimeFeedback.DiscardUnknown(m)
}

var xxx_messageInfo_DamageOverTimeFeedback proto.InternalMessageInfo

func (m *DamageOverTimeFeedback) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type EffectFeedback struct {
	HealFeedback           *HealFeedback           `protobuf:"bytes,1,opt,name=HealFeedback" json:"HealFeedback,omitempty"`
	DamageFeedback         *DamageFeedback         `protobuf:"bytes,2,opt,name=DamageFeedback" json:"DamageFeedback,omitempty"`
	HealOverTimeFeedback   *HealOverTimeFeedback   `protobuf:"bytes,3,opt,name=HealOverTimeFeedback" json:"HealOverTimeFeedback,omitempty"`
	DamageOverTimeFeedback *DamageOverTimeFeedback `protobuf:"bytes,4,opt,name=DamageOverTimeFeedback" json:"DamageOverTimeFeedback,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                `json:"-"`
	XXX_sizecache          int32                   `json:"-"`
}

func (m *EffectFeedback) Reset()      { *m = EffectFeedback{} }
func (*EffectFeedback) ProtoMessage() {}
func (*EffectFeedback) Descriptor() ([]byte, []int) {
	return fileDescriptor_effect_feedback_14e22f356a639c7d, []int{4}
}
func (m *EffectFeedback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EffectFeedback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EffectFeedback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EffectFeedback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EffectFeedback.Merge(dst, src)
}
func (m *EffectFeedback) XXX_Size() int {
	return m.Size()
}
func (m *EffectFeedback) XXX_DiscardUnknown() {
	xxx_messageInfo_EffectFeedback.DiscardUnknown(m)
}

var xxx_messageInfo_EffectFeedback proto.InternalMessageInfo

func (m *EffectFeedback) GetHealFeedback() *HealFeedback {
	if m != nil {
		return m.HealFeedback
	}
	return nil
}

func (m *EffectFeedback) GetDamageFeedback() *DamageFeedback {
	if m != nil {
		return m.DamageFeedback
	}
	return nil
}

func (m *EffectFeedback) GetHealOverTimeFeedback() *HealOverTimeFeedback {
	if m != nil {
		return m.HealOverTimeFeedback
	}
	return nil
}

func (m *EffectFeedback) GetDamageOverTimeFeedback() *DamageOverTimeFeedback {
	if m != nil {
		return m.DamageOverTimeFeedback
	}
	return nil
}

func init() {
	proto.RegisterType((*HealFeedback)(nil), "HealFeedback")
	proto.RegisterType((*DamageFeedback)(nil), "DamageFeedback")
	proto.RegisterType((*HealOverTimeFeedback)(nil), "HealOverTimeFeedback")
	proto.RegisterType((*DamageOverTimeFeedback)(nil), "DamageOverTimeFeedback")
	proto.RegisterType((*EffectFeedback)(nil), "EffectFeedback")
}
func (this *HealFeedback) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealFeedback)
	if !ok {
		that2, ok := that.(HealFeedback)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (this *DamageFeedback) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DamageFeedback)
	if !ok {
		that2, ok := that.(DamageFeedback)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (this *HealOverTimeFeedback) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealOverTimeFeedback)
	if !ok {
		that2, ok := that.(HealOverTimeFeedback)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (this *DamageOverTimeFeedback) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DamageOverTimeFeedback)
	if !ok {
		that2, ok := that.(DamageOverTimeFeedback)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (this *EffectFeedback) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EffectFeedback)
	if !ok {
		that2, ok := that.(EffectFeedback)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HealFeedback.Equal(that1.HealFeedback) {
		return false
	}
	if !this.DamageFeedback.Equal(that1.DamageFeedback) {
		return false
	}
	if !this.HealOverTimeFeedback.Equal(that1.HealOverTimeFeedback) {
		return false
	}
	if !this.DamageOverTimeFeedback.Equal(that1.DamageOverTimeFeedback) {
		return false
	}
	return true
}
func (this *HealFeedback) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ability.HealFeedback{")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DamageFeedback) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ability.DamageFeedback{")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HealOverTimeFeedback) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ability.HealOverTimeFeedback{")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DamageOverTimeFeedback) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ability.DamageOverTimeFeedback{")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EffectFeedback) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ability.EffectFeedback{")
	if this.HealFeedback != nil {
		s = append(s, "HealFeedback: "+fmt.Sprintf("%#v", this.HealFeedback)+",\n")
	}
	if this.DamageFeedback != nil {
		s = append(s, "DamageFeedback: "+fmt.Sprintf("%#v", this.DamageFeedback)+",\n")
	}
	if this.HealOverTimeFeedback != nil {
		s = append(s, "HealOverTimeFeedback: "+fmt.Sprintf("%#v", this.HealOverTimeFeedback)+",\n")
	}
	if this.DamageOverTimeFeedback != nil {
		s = append(s, "DamageOverTimeFeedback: "+fmt.Sprintf("%#v", this.DamageOverTimeFeedback)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEffectFeedback(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HealFeedback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealFeedback) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEffectFeedback(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *DamageFeedback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DamageFeedback) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEffectFeedback(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *HealOverTimeFeedback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealOverTimeFeedback) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEffectFeedback(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *DamageOverTimeFeedback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DamageOverTimeFeedback) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEffectFeedback(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *EffectFeedback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EffectFeedback) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HealFeedback != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEffectFeedback(dAtA, i, uint64(m.HealFeedback.Size()))
		n1, err := m.HealFeedback.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.DamageFeedback != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEffectFeedback(dAtA, i, uint64(m.DamageFeedback.Size()))
		n2, err := m.DamageFeedback.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.HealOverTimeFeedback != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEffectFeedback(dAtA, i, uint64(m.HealOverTimeFeedback.Size()))
		n3, err := m.HealOverTimeFeedback.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.DamageOverTimeFeedback != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEffectFeedback(dAtA, i, uint64(m.DamageOverTimeFeedback.Size()))
		n4, err := m.DamageOverTimeFeedback.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeVarintEffectFeedback(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedHealFeedback(r randyEffectFeedback, easy bool) *HealFeedback {
	this := &HealFeedback{}
	this.Amount = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDamageFeedback(r randyEffectFeedback, easy bool) *DamageFeedback {
	this := &DamageFeedback{}
	this.Amount = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHealOverTimeFeedback(r randyEffectFeedback, easy bool) *HealOverTimeFeedback {
	this := &HealOverTimeFeedback{}
	this.Amount = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDamageOverTimeFeedback(r randyEffectFeedback, easy bool) *DamageOverTimeFeedback {
	this := &DamageOverTimeFeedback{}
	this.Amount = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEffectFeedback(r randyEffectFeedback, easy bool) *EffectFeedback {
	this := &EffectFeedback{}
	fieldNum := r.Intn(4)
	switch fieldNum {
	case 0:
		this.HealFeedback = NewPopulatedHealFeedback(r, easy)
	case 1:
		this.DamageFeedback = NewPopulatedDamageFeedback(r, easy)
	case 2:
		this.HealOverTimeFeedback = NewPopulatedHealOverTimeFeedback(r, easy)
	case 3:
		this.DamageOverTimeFeedback = NewPopulatedDamageOverTimeFeedback(r, easy)
	}
	return this
}

type randyEffectFeedback interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneEffectFeedback(r randyEffectFeedback) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringEffectFeedback(r randyEffectFeedback) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneEffectFeedback(r)
	}
	return string(tmps)
}
func randUnrecognizedEffectFeedback(r randyEffectFeedback, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldEffectFeedback(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldEffectFeedback(dAtA []byte, r randyEffectFeedback, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateEffectFeedback(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateEffectFeedback(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateEffectFeedback(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateEffectFeedback(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateEffectFeedback(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateEffectFeedback(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateEffectFeedback(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *HealFeedback) Size() (n int) {
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovEffectFeedback(uint64(m.Amount))
	}
	return n
}

func (m *DamageFeedback) Size() (n int) {
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovEffectFeedback(uint64(m.Amount))
	}
	return n
}

func (m *HealOverTimeFeedback) Size() (n int) {
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovEffectFeedback(uint64(m.Amount))
	}
	return n
}

func (m *DamageOverTimeFeedback) Size() (n int) {
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovEffectFeedback(uint64(m.Amount))
	}
	return n
}

func (m *EffectFeedback) Size() (n int) {
	var l int
	_ = l
	if m.HealFeedback != nil {
		l = m.HealFeedback.Size()
		n += 1 + l + sovEffectFeedback(uint64(l))
	}
	if m.DamageFeedback != nil {
		l = m.DamageFeedback.Size()
		n += 1 + l + sovEffectFeedback(uint64(l))
	}
	if m.HealOverTimeFeedback != nil {
		l = m.HealOverTimeFeedback.Size()
		n += 1 + l + sovEffectFeedback(uint64(l))
	}
	if m.DamageOverTimeFeedback != nil {
		l = m.DamageOverTimeFeedback.Size()
		n += 1 + l + sovEffectFeedback(uint64(l))
	}
	return n
}

func sovEffectFeedback(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEffectFeedback(x uint64) (n int) {
	return sovEffectFeedback(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HealFeedback) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HealFeedback{`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DamageFeedback) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DamageFeedback{`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HealOverTimeFeedback) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HealOverTimeFeedback{`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DamageOverTimeFeedback) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DamageOverTimeFeedback{`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EffectFeedback) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EffectFeedback{`,
		`HealFeedback:` + strings.Replace(fmt.Sprintf("%v", this.HealFeedback), "HealFeedback", "HealFeedback", 1) + `,`,
		`DamageFeedback:` + strings.Replace(fmt.Sprintf("%v", this.DamageFeedback), "DamageFeedback", "DamageFeedback", 1) + `,`,
		`HealOverTimeFeedback:` + strings.Replace(fmt.Sprintf("%v", this.HealOverTimeFeedback), "HealOverTimeFeedback", "HealOverTimeFeedback", 1) + `,`,
		`DamageOverTimeFeedback:` + strings.Replace(fmt.Sprintf("%v", this.DamageOverTimeFeedback), "DamageOverTimeFeedback", "DamageOverTimeFeedback", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEffectFeedback(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (this *EffectFeedback) GetValue() interface{} {
	if this.HealFeedback != nil {
		return this.HealFeedback
	}
	if this.DamageFeedback != nil {
		return this.DamageFeedback
	}
	if this.HealOverTimeFeedback != nil {
		return this.HealOverTimeFeedback
	}
	if this.DamageOverTimeFeedback != nil {
		return this.DamageOverTimeFeedback
	}
	return nil
}

func (this *EffectFeedback) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *HealFeedback:
		this.HealFeedback = vt
	case *DamageFeedback:
		this.DamageFeedback = vt
	case *HealOverTimeFeedback:
		this.HealOverTimeFeedback = vt
	case *DamageOverTimeFeedback:
		this.DamageOverTimeFeedback = vt
	default:
		return false
	}
	return true
}
func (m *HealFeedback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEffectFeedback
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealFeedback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealFeedback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEffectFeedback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEffectFeedback(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEffectFeedback
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DamageFeedback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEffectFeedback
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DamageFeedback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DamageFeedback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEffectFeedback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEffectFeedback(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEffectFeedback
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealOverTimeFeedback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEffectFeedback
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealOverTimeFeedback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealOverTimeFeedback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEffectFeedback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEffectFeedback(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEffectFeedback
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DamageOverTimeFeedback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEffectFeedback
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DamageOverTimeFeedback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DamageOverTimeFeedback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEffectFeedback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEffectFeedback(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEffectFeedback
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EffectFeedback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEffectFeedback
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EffectFeedback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EffectFeedback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealFeedback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEffectFeedback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEffectFeedback
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HealFeedback == nil {
				m.HealFeedback = &HealFeedback{}
			}
			if err := m.HealFeedback.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageFeedback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEffectFeedback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEffectFeedback
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DamageFeedback == nil {
				m.DamageFeedback = &DamageFeedback{}
			}
			if err := m.DamageFeedback.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealOverTimeFeedback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEffectFeedback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEffectFeedback
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HealOverTimeFeedback == nil {
				m.HealOverTimeFeedback = &HealOverTimeFeedback{}
			}
			if err := m.HealOverTimeFeedback.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageOverTimeFeedback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEffectFeedback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEffectFeedback
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DamageOverTimeFeedback == nil {
				m.DamageOverTimeFeedback = &DamageOverTimeFeedback{}
			}
			if err := m.DamageOverTimeFeedback.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEffectFeedback(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEffectFeedback
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEffectFeedback(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEffectFeedback
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEffectFeedback
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEffectFeedback
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEffectFeedback
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEffectFeedback
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEffectFeedback(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEffectFeedback = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEffectFeedback   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("effect_feedback.proto", fileDescriptor_effect_feedback_14e22f356a639c7d)
}

var fileDescriptor_effect_feedback_14e22f356a639c7d = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0x4d, 0x4b, 0x4b,
	0x4d, 0x2e, 0x89, 0x4f, 0x4b, 0x4d, 0x4d, 0x49, 0x4a, 0x4c, 0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x97, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf,
	0x4f, 0xcf, 0xd7, 0x07, 0x0b, 0x27, 0x95, 0xa6, 0x81, 0x79, 0x60, 0x0e, 0x98, 0x05, 0x51, 0xae,
	0xa4, 0xc6, 0xc5, 0xe3, 0x91, 0x9a, 0x98, 0xe3, 0x06, 0x35, 0x44, 0x48, 0x8c, 0x8b, 0xcd, 0x31,
	0x37, 0xbf, 0x34, 0xaf, 0x44, 0x82, 0x51, 0x81, 0x51, 0x83, 0x25, 0x08, 0xca, 0x53, 0xd2, 0xe0,
	0xe2, 0x73, 0x49, 0xcc, 0x4d, 0x4c, 0x4f, 0x25, 0xa8, 0x52, 0x8f, 0x4b, 0x04, 0x64, 0xa2, 0x7f,
	0x59, 0x6a, 0x51, 0x48, 0x66, 0x2e, 0x61, 0xf5, 0x06, 0x5c, 0x62, 0x10, 0x93, 0x89, 0xd6, 0x31,
	0x8f, 0x89, 0x8b, 0xcf, 0x15, 0xec, 0x79, 0xb8, 0x52, 0x43, 0x54, 0x6f, 0x80, 0x35, 0x70, 0x1b,
	0xf1, 0xea, 0x21, 0x0b, 0x06, 0xa1, 0xfa, 0xd4, 0x1c, 0xdd, 0x47, 0x12, 0x4c, 0x60, 0x4d, 0xfc,
	0x7a, 0xa8, 0xc2, 0x41, 0xe8, 0x1e, 0xf7, 0xc4, 0xee, 0x41, 0x09, 0x66, 0xb0, 0x76, 0x51, 0x3d,
	0x6c, 0x92, 0x41, 0xd8, 0xc3, 0xc4, 0x1f, 0x97, 0xdf, 0x25, 0x58, 0xc0, 0x86, 0x89, 0xeb, 0x61,
	0x97, 0x0e, 0xc2, 0xa1, 0xcd, 0x8a, 0xe5, 0xc4, 0x02, 0x79, 0x46, 0x27, 0xc7, 0x0b, 0x0f, 0xe5,
	0x18, 0x6e, 0x3c, 0x94, 0x63, 0xf8, 0xf0, 0x50, 0x8e, 0xf1, 0xc7, 0x43, 0x39, 0xc6, 0x86, 0x47,
	0x72, 0x8c, 0x2b, 0x1e, 0xc9, 0x31, 0xee, 0x78, 0x24, 0xc7, 0x78, 0xe0, 0x91, 0x1c, 0xe3, 0x89,
	0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0xf8, 0xe2, 0x91, 0x1c, 0xc3,
	0x87, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x44, 0xb1, 0x27, 0x26, 0x65, 0xe6, 0x64, 0x96,
	0x54, 0x26, 0xb1, 0x81, 0x93, 0x87, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x99, 0x15, 0xb5, 0x0d,
	0x66, 0x02, 0x00, 0x00,
}

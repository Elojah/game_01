// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: component.proto

package ability

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Element int32

const (
	Fire  Element = 0
	Water Element = 1
	Air   Element = 2
	Earth Element = 3
	Time  Element = 4
)

var Element_name = map[int32]string{
	0: "Fire",
	1: "Water",
	2: "Air",
	3: "Earth",
	4: "Time",
}
var Element_value = map[string]int32{
	"Fire":  0,
	"Water": 1,
	"Air":   2,
	"Earth": 3,
	"Time":  4,
}

func (Element) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_component_37f2491439ff1bb1, []int{0}
}

type HealDirect struct {
	Amount               uint64   `protobuf:"varint,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Element              Element  `protobuf:"varint,2,opt,name=Element,proto3,enum=Element" json:"Element,omitempty"`
	Range                uint64   `protobuf:"varint,3,opt,name=Range,proto3" json:"Range,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealDirect) Reset()      { *m = HealDirect{} }
func (*HealDirect) ProtoMessage() {}
func (*HealDirect) Descriptor() ([]byte, []int) {
	return fileDescriptor_component_37f2491439ff1bb1, []int{0}
}
func (m *HealDirect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealDirect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealDirect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HealDirect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealDirect.Merge(dst, src)
}
func (m *HealDirect) XXX_Size() int {
	return m.Size()
}
func (m *HealDirect) XXX_DiscardUnknown() {
	xxx_messageInfo_HealDirect.DiscardUnknown(m)
}

var xxx_messageInfo_HealDirect proto.InternalMessageInfo

func (m *HealDirect) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *HealDirect) GetElement() Element {
	if m != nil {
		return m.Element
	}
	return Fire
}

func (m *HealDirect) GetRange() uint64 {
	if m != nil {
		return m.Range
	}
	return 0
}

type DamageDirect struct {
	Amount               uint64   `protobuf:"varint,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Element              Element  `protobuf:"varint,2,opt,name=Element,proto3,enum=Element" json:"Element,omitempty"`
	Range                uint64   `protobuf:"varint,3,opt,name=Range,proto3" json:"Range,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DamageDirect) Reset()      { *m = DamageDirect{} }
func (*DamageDirect) ProtoMessage() {}
func (*DamageDirect) Descriptor() ([]byte, []int) {
	return fileDescriptor_component_37f2491439ff1bb1, []int{1}
}
func (m *DamageDirect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DamageDirect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DamageDirect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DamageDirect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DamageDirect.Merge(dst, src)
}
func (m *DamageDirect) XXX_Size() int {
	return m.Size()
}
func (m *DamageDirect) XXX_DiscardUnknown() {
	xxx_messageInfo_DamageDirect.DiscardUnknown(m)
}

var xxx_messageInfo_DamageDirect proto.InternalMessageInfo

func (m *DamageDirect) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *DamageDirect) GetElement() Element {
	if m != nil {
		return m.Element
	}
	return Fire
}

func (m *DamageDirect) GetRange() uint64 {
	if m != nil {
		return m.Range
	}
	return 0
}

type HealOverTime struct {
	Amount               uint64   `protobuf:"varint,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Element              Element  `protobuf:"varint,2,opt,name=Element,proto3,enum=Element" json:"Element,omitempty"`
	Frequency            uint64   `protobuf:"varint,3,opt,name=Frequency,proto3" json:"Frequency,omitempty"`
	Duration             uint64   `protobuf:"varint,4,opt,name=Duration,proto3" json:"Duration,omitempty"`
	Range                uint64   `protobuf:"varint,5,opt,name=Range,proto3" json:"Range,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealOverTime) Reset()      { *m = HealOverTime{} }
func (*HealOverTime) ProtoMessage() {}
func (*HealOverTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_component_37f2491439ff1bb1, []int{2}
}
func (m *HealOverTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealOverTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealOverTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HealOverTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealOverTime.Merge(dst, src)
}
func (m *HealOverTime) XXX_Size() int {
	return m.Size()
}
func (m *HealOverTime) XXX_DiscardUnknown() {
	xxx_messageInfo_HealOverTime.DiscardUnknown(m)
}

var xxx_messageInfo_HealOverTime proto.InternalMessageInfo

func (m *HealOverTime) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *HealOverTime) GetElement() Element {
	if m != nil {
		return m.Element
	}
	return Fire
}

func (m *HealOverTime) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *HealOverTime) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *HealOverTime) GetRange() uint64 {
	if m != nil {
		return m.Range
	}
	return 0
}

type DamageOverTime struct {
	Amount               uint64   `protobuf:"varint,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Element              Element  `protobuf:"varint,2,opt,name=Element,proto3,enum=Element" json:"Element,omitempty"`
	Frequency            uint64   `protobuf:"varint,3,opt,name=Frequency,proto3" json:"Frequency,omitempty"`
	Duration             uint64   `protobuf:"varint,4,opt,name=Duration,proto3" json:"Duration,omitempty"`
	Range                uint64   `protobuf:"varint,5,opt,name=Range,proto3" json:"Range,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DamageOverTime) Reset()      { *m = DamageOverTime{} }
func (*DamageOverTime) ProtoMessage() {}
func (*DamageOverTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_component_37f2491439ff1bb1, []int{3}
}
func (m *DamageOverTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DamageOverTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DamageOverTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DamageOverTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DamageOverTime.Merge(dst, src)
}
func (m *DamageOverTime) XXX_Size() int {
	return m.Size()
}
func (m *DamageOverTime) XXX_DiscardUnknown() {
	xxx_messageInfo_DamageOverTime.DiscardUnknown(m)
}

var xxx_messageInfo_DamageOverTime proto.InternalMessageInfo

func (m *DamageOverTime) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *DamageOverTime) GetElement() Element {
	if m != nil {
		return m.Element
	}
	return Fire
}

func (m *DamageOverTime) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *DamageOverTime) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *DamageOverTime) GetRange() uint64 {
	if m != nil {
		return m.Range
	}
	return 0
}

type Component struct {
	HealDirect           *HealDirect     `protobuf:"bytes,1,opt,name=HealDirect" json:"HealDirect,omitempty"`
	DamageDirect         *DamageDirect   `protobuf:"bytes,2,opt,name=DamageDirect" json:"DamageDirect,omitempty"`
	HealOverTime         *HealOverTime   `protobuf:"bytes,3,opt,name=HealOverTime" json:"HealOverTime,omitempty"`
	DamageOverTime       *DamageOverTime `protobuf:"bytes,4,opt,name=DamageOverTime" json:"DamageOverTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Component) Reset()      { *m = Component{} }
func (*Component) ProtoMessage() {}
func (*Component) Descriptor() ([]byte, []int) {
	return fileDescriptor_component_37f2491439ff1bb1, []int{4}
}
func (m *Component) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Component) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Component.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Component) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Component.Merge(dst, src)
}
func (m *Component) XXX_Size() int {
	return m.Size()
}
func (m *Component) XXX_DiscardUnknown() {
	xxx_messageInfo_Component.DiscardUnknown(m)
}

var xxx_messageInfo_Component proto.InternalMessageInfo

func (m *Component) GetHealDirect() *HealDirect {
	if m != nil {
		return m.HealDirect
	}
	return nil
}

func (m *Component) GetDamageDirect() *DamageDirect {
	if m != nil {
		return m.DamageDirect
	}
	return nil
}

func (m *Component) GetHealOverTime() *HealOverTime {
	if m != nil {
		return m.HealOverTime
	}
	return nil
}

func (m *Component) GetDamageOverTime() *DamageOverTime {
	if m != nil {
		return m.DamageOverTime
	}
	return nil
}

func init() {
	proto.RegisterType((*HealDirect)(nil), "HealDirect")
	proto.RegisterType((*DamageDirect)(nil), "DamageDirect")
	proto.RegisterType((*HealOverTime)(nil), "HealOverTime")
	proto.RegisterType((*DamageOverTime)(nil), "DamageOverTime")
	proto.RegisterType((*Component)(nil), "Component")
	proto.RegisterEnum("Element", Element_name, Element_value)
}
func (x Element) String() string {
	s, ok := Element_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *HealDirect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealDirect)
	if !ok {
		that2, ok := that.(HealDirect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.Element != that1.Element {
		return false
	}
	if this.Range != that1.Range {
		return false
	}
	return true
}
func (this *DamageDirect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DamageDirect)
	if !ok {
		that2, ok := that.(DamageDirect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.Element != that1.Element {
		return false
	}
	if this.Range != that1.Range {
		return false
	}
	return true
}
func (this *HealOverTime) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealOverTime)
	if !ok {
		that2, ok := that.(HealOverTime)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.Element != that1.Element {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	if this.Range != that1.Range {
		return false
	}
	return true
}
func (this *DamageOverTime) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DamageOverTime)
	if !ok {
		that2, ok := that.(DamageOverTime)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.Element != that1.Element {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	if this.Range != that1.Range {
		return false
	}
	return true
}
func (this *Component) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Component)
	if !ok {
		that2, ok := that.(Component)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HealDirect.Equal(that1.HealDirect) {
		return false
	}
	if !this.DamageDirect.Equal(that1.DamageDirect) {
		return false
	}
	if !this.HealOverTime.Equal(that1.HealOverTime) {
		return false
	}
	if !this.DamageOverTime.Equal(that1.DamageOverTime) {
		return false
	}
	return true
}
func (this *HealDirect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ability.HealDirect{")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "Element: "+fmt.Sprintf("%#v", this.Element)+",\n")
	s = append(s, "Range: "+fmt.Sprintf("%#v", this.Range)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DamageDirect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ability.DamageDirect{")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "Element: "+fmt.Sprintf("%#v", this.Element)+",\n")
	s = append(s, "Range: "+fmt.Sprintf("%#v", this.Range)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HealOverTime) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ability.HealOverTime{")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "Element: "+fmt.Sprintf("%#v", this.Element)+",\n")
	s = append(s, "Frequency: "+fmt.Sprintf("%#v", this.Frequency)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "Range: "+fmt.Sprintf("%#v", this.Range)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DamageOverTime) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&ability.DamageOverTime{")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "Element: "+fmt.Sprintf("%#v", this.Element)+",\n")
	s = append(s, "Frequency: "+fmt.Sprintf("%#v", this.Frequency)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "Range: "+fmt.Sprintf("%#v", this.Range)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Component) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ability.Component{")
	if this.HealDirect != nil {
		s = append(s, "HealDirect: "+fmt.Sprintf("%#v", this.HealDirect)+",\n")
	}
	if this.DamageDirect != nil {
		s = append(s, "DamageDirect: "+fmt.Sprintf("%#v", this.DamageDirect)+",\n")
	}
	if this.HealOverTime != nil {
		s = append(s, "HealOverTime: "+fmt.Sprintf("%#v", this.HealOverTime)+",\n")
	}
	if this.DamageOverTime != nil {
		s = append(s, "DamageOverTime: "+fmt.Sprintf("%#v", this.DamageOverTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringComponent(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HealDirect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealDirect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintComponent(dAtA, i, uint64(m.Amount))
	}
	if m.Element != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintComponent(dAtA, i, uint64(m.Element))
	}
	if m.Range != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintComponent(dAtA, i, uint64(m.Range))
	}
	return i, nil
}

func (m *DamageDirect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DamageDirect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintComponent(dAtA, i, uint64(m.Amount))
	}
	if m.Element != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintComponent(dAtA, i, uint64(m.Element))
	}
	if m.Range != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintComponent(dAtA, i, uint64(m.Range))
	}
	return i, nil
}

func (m *HealOverTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealOverTime) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintComponent(dAtA, i, uint64(m.Amount))
	}
	if m.Element != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintComponent(dAtA, i, uint64(m.Element))
	}
	if m.Frequency != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintComponent(dAtA, i, uint64(m.Frequency))
	}
	if m.Duration != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintComponent(dAtA, i, uint64(m.Duration))
	}
	if m.Range != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintComponent(dAtA, i, uint64(m.Range))
	}
	return i, nil
}

func (m *DamageOverTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DamageOverTime) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintComponent(dAtA, i, uint64(m.Amount))
	}
	if m.Element != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintComponent(dAtA, i, uint64(m.Element))
	}
	if m.Frequency != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintComponent(dAtA, i, uint64(m.Frequency))
	}
	if m.Duration != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintComponent(dAtA, i, uint64(m.Duration))
	}
	if m.Range != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintComponent(dAtA, i, uint64(m.Range))
	}
	return i, nil
}

func (m *Component) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Component) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HealDirect != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintComponent(dAtA, i, uint64(m.HealDirect.Size()))
		n1, err := m.HealDirect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.DamageDirect != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintComponent(dAtA, i, uint64(m.DamageDirect.Size()))
		n2, err := m.DamageDirect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.HealOverTime != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintComponent(dAtA, i, uint64(m.HealOverTime.Size()))
		n3, err := m.HealOverTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.DamageOverTime != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintComponent(dAtA, i, uint64(m.DamageOverTime.Size()))
		n4, err := m.DamageOverTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeVarintComponent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedHealDirect(r randyComponent, easy bool) *HealDirect {
	this := &HealDirect{}
	this.Amount = uint64(uint64(r.Uint32()))
	this.Element = Element([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.Range = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDamageDirect(r randyComponent, easy bool) *DamageDirect {
	this := &DamageDirect{}
	this.Amount = uint64(uint64(r.Uint32()))
	this.Element = Element([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.Range = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHealOverTime(r randyComponent, easy bool) *HealOverTime {
	this := &HealOverTime{}
	this.Amount = uint64(uint64(r.Uint32()))
	this.Element = Element([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.Frequency = uint64(uint64(r.Uint32()))
	this.Duration = uint64(uint64(r.Uint32()))
	this.Range = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDamageOverTime(r randyComponent, easy bool) *DamageOverTime {
	this := &DamageOverTime{}
	this.Amount = uint64(uint64(r.Uint32()))
	this.Element = Element([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.Frequency = uint64(uint64(r.Uint32()))
	this.Duration = uint64(uint64(r.Uint32()))
	this.Range = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedComponent(r randyComponent, easy bool) *Component {
	this := &Component{}
	fieldNum := r.Intn(4)
	switch fieldNum {
	case 0:
		this.HealDirect = NewPopulatedHealDirect(r, easy)
	case 1:
		this.DamageDirect = NewPopulatedDamageDirect(r, easy)
	case 2:
		this.HealOverTime = NewPopulatedHealOverTime(r, easy)
	case 3:
		this.DamageOverTime = NewPopulatedDamageOverTime(r, easy)
	}
	return this
}

type randyComponent interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneComponent(r randyComponent) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringComponent(r randyComponent) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneComponent(r)
	}
	return string(tmps)
}
func randUnrecognizedComponent(r randyComponent, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldComponent(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldComponent(dAtA []byte, r randyComponent, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateComponent(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateComponent(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateComponent(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateComponent(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateComponent(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateComponent(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateComponent(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *HealDirect) Size() (n int) {
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovComponent(uint64(m.Amount))
	}
	if m.Element != 0 {
		n += 1 + sovComponent(uint64(m.Element))
	}
	if m.Range != 0 {
		n += 1 + sovComponent(uint64(m.Range))
	}
	return n
}

func (m *DamageDirect) Size() (n int) {
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovComponent(uint64(m.Amount))
	}
	if m.Element != 0 {
		n += 1 + sovComponent(uint64(m.Element))
	}
	if m.Range != 0 {
		n += 1 + sovComponent(uint64(m.Range))
	}
	return n
}

func (m *HealOverTime) Size() (n int) {
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovComponent(uint64(m.Amount))
	}
	if m.Element != 0 {
		n += 1 + sovComponent(uint64(m.Element))
	}
	if m.Frequency != 0 {
		n += 1 + sovComponent(uint64(m.Frequency))
	}
	if m.Duration != 0 {
		n += 1 + sovComponent(uint64(m.Duration))
	}
	if m.Range != 0 {
		n += 1 + sovComponent(uint64(m.Range))
	}
	return n
}

func (m *DamageOverTime) Size() (n int) {
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovComponent(uint64(m.Amount))
	}
	if m.Element != 0 {
		n += 1 + sovComponent(uint64(m.Element))
	}
	if m.Frequency != 0 {
		n += 1 + sovComponent(uint64(m.Frequency))
	}
	if m.Duration != 0 {
		n += 1 + sovComponent(uint64(m.Duration))
	}
	if m.Range != 0 {
		n += 1 + sovComponent(uint64(m.Range))
	}
	return n
}

func (m *Component) Size() (n int) {
	var l int
	_ = l
	if m.HealDirect != nil {
		l = m.HealDirect.Size()
		n += 1 + l + sovComponent(uint64(l))
	}
	if m.DamageDirect != nil {
		l = m.DamageDirect.Size()
		n += 1 + l + sovComponent(uint64(l))
	}
	if m.HealOverTime != nil {
		l = m.HealOverTime.Size()
		n += 1 + l + sovComponent(uint64(l))
	}
	if m.DamageOverTime != nil {
		l = m.DamageOverTime.Size()
		n += 1 + l + sovComponent(uint64(l))
	}
	return n
}

func sovComponent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozComponent(x uint64) (n int) {
	return sovComponent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HealDirect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HealDirect{`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`Element:` + fmt.Sprintf("%v", this.Element) + `,`,
		`Range:` + fmt.Sprintf("%v", this.Range) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DamageDirect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DamageDirect{`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`Element:` + fmt.Sprintf("%v", this.Element) + `,`,
		`Range:` + fmt.Sprintf("%v", this.Range) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HealOverTime) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HealOverTime{`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`Element:` + fmt.Sprintf("%v", this.Element) + `,`,
		`Frequency:` + fmt.Sprintf("%v", this.Frequency) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`Range:` + fmt.Sprintf("%v", this.Range) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DamageOverTime) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DamageOverTime{`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`Element:` + fmt.Sprintf("%v", this.Element) + `,`,
		`Frequency:` + fmt.Sprintf("%v", this.Frequency) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`Range:` + fmt.Sprintf("%v", this.Range) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Component) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Component{`,
		`HealDirect:` + strings.Replace(fmt.Sprintf("%v", this.HealDirect), "HealDirect", "HealDirect", 1) + `,`,
		`DamageDirect:` + strings.Replace(fmt.Sprintf("%v", this.DamageDirect), "DamageDirect", "DamageDirect", 1) + `,`,
		`HealOverTime:` + strings.Replace(fmt.Sprintf("%v", this.HealOverTime), "HealOverTime", "HealOverTime", 1) + `,`,
		`DamageOverTime:` + strings.Replace(fmt.Sprintf("%v", this.DamageOverTime), "DamageOverTime", "DamageOverTime", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringComponent(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (this *Component) GetValue() interface{} {
	if this.HealDirect != nil {
		return this.HealDirect
	}
	if this.DamageDirect != nil {
		return this.DamageDirect
	}
	if this.HealOverTime != nil {
		return this.HealOverTime
	}
	if this.DamageOverTime != nil {
		return this.DamageOverTime
	}
	return nil
}

func (this *Component) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *HealDirect:
		this.HealDirect = vt
	case *DamageDirect:
		this.DamageDirect = vt
	case *HealOverTime:
		this.HealOverTime = vt
	case *DamageOverTime:
		this.DamageOverTime = vt
	default:
		return false
	}
	return true
}
func (m *HealDirect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealDirect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealDirect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Element", wireType)
			}
			m.Element = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Element |= (Element(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			m.Range = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Range |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DamageDirect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DamageDirect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DamageDirect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Element", wireType)
			}
			m.Element = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Element |= (Element(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			m.Range = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Range |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealOverTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealOverTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealOverTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Element", wireType)
			}
			m.Element = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Element |= (Element(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			m.Range = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Range |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DamageOverTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DamageOverTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DamageOverTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Element", wireType)
			}
			m.Element = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Element |= (Element(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			m.Range = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Range |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Component) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Component: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Component: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealDirect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HealDirect == nil {
				m.HealDirect = &HealDirect{}
			}
			if err := m.HealDirect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageDirect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DamageDirect == nil {
				m.DamageDirect = &DamageDirect{}
			}
			if err := m.DamageDirect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealOverTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HealOverTime == nil {
				m.HealOverTime = &HealOverTime{}
			}
			if err := m.HealOverTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageOverTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComponent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DamageOverTime == nil {
				m.DamageOverTime = &DamageOverTime{}
			}
			if err := m.DamageOverTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComponent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthComponent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowComponent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipComponent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthComponent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComponent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("component.proto", fileDescriptor_component_37f2491439ff1bb1) }

var fileDescriptor_component_37f2491439ff1bb1 = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x53, 0xbf, 0xcb, 0xd3, 0x40,
	0x18, 0xce, 0xfb, 0x35, 0xfd, 0xda, 0x5e, 0x3e, 0xbf, 0x2f, 0x1c, 0x22, 0xe1, 0x43, 0xce, 0x8f,
	0x4e, 0x45, 0x31, 0xa5, 0x71, 0x10, 0xc4, 0xa5, 0xda, 0x16, 0x37, 0x21, 0x08, 0x82, 0x83, 0x78,
	0x09, 0x67, 0x7a, 0xd0, 0xe4, 0xea, 0x71, 0x11, 0xba, 0xf9, 0x27, 0x38, 0x8b, 0x83, 0xa3, 0x7f,
	0x82, 0xa3, 0x63, 0xc7, 0x8e, 0x2e, 0x82, 0x39, 0x17, 0xc7, 0x8e, 0x8e, 0x92, 0xeb, 0xaf, 0xa4,
	0xab, 0x08, 0x6e, 0x79, 0x9e, 0x7b, 0x2f, 0xef, 0xf3, 0xbc, 0xcf, 0x7b, 0xe8, 0x22, 0x16, 0xe9,
	0x5c, 0x64, 0x2c, 0x53, 0xfe, 0x5c, 0x0a, 0x25, 0x2e, 0xef, 0x26, 0x5c, 0x4d, 0xf3, 0xc8, 0x8f,
	0x45, 0xda, 0x4f, 0x44, 0x22, 0xfa, 0x86, 0x8e, 0xf2, 0xd7, 0x06, 0x19, 0x60, 0xbe, 0x36, 0xe5,
	0xdd, 0x97, 0x08, 0x3d, 0x61, 0x74, 0x36, 0xe2, 0x92, 0xc5, 0x0a, 0xdf, 0x40, 0xa7, 0xc3, 0x54,
	0xe4, 0x99, 0xf2, 0xe0, 0x0a, 0x7a, 0x76, 0xb8, 0x45, 0xb8, 0x8b, 0x5a, 0xe3, 0x19, 0x4b, 0x59,
	0xa6, 0xbc, 0x93, 0x2b, 0xe8, 0x9d, 0x07, 0x6d, 0x7f, 0x8b, 0xc3, 0xdd, 0x01, 0xbe, 0x8e, 0x9a,
	0x21, 0xcd, 0x12, 0xe6, 0x35, 0xcc, 0xd5, 0x0d, 0xe8, 0xbe, 0x42, 0x67, 0x23, 0x9a, 0xd2, 0x84,
	0xfd, 0xb3, 0x0e, 0x1f, 0x00, 0x9d, 0x95, 0x16, 0x9e, 0xbe, 0x65, 0xf2, 0x19, 0x4f, 0xd9, 0x5f,
	0xb5, 0xb8, 0x89, 0x3a, 0x13, 0xc9, 0xde, 0xe4, 0x2c, 0x8b, 0x17, 0xdb, 0x36, 0x07, 0x02, 0x5f,
	0xa2, 0xf6, 0x28, 0x97, 0x54, 0x71, 0x91, 0x79, 0xb6, 0x39, 0xdc, 0xe3, 0x83, 0xb8, 0x66, 0x55,
	0xdc, 0x47, 0x40, 0xe7, 0x1b, 0xff, 0xff, 0xa5, 0xbc, 0xef, 0x80, 0x3a, 0x8f, 0x77, 0x0b, 0x84,
	0xef, 0x54, 0x77, 0xc1, 0xa8, 0x73, 0x02, 0xc7, 0x3f, 0x50, 0x61, 0x75, 0x55, 0x06, 0xf5, 0x60,
	0x8d, 0x66, 0x27, 0xb8, 0xe6, 0x57, 0xc9, 0xb0, 0x9e, 0xfd, 0xa0, 0x1e, 0x94, 0x31, 0x50, 0x5e,
	0xa9, 0x92, 0x61, 0x3d, 0xcb, 0xfb, 0xc7, 0xe3, 0x33, 0xc6, 0x9c, 0xe0, 0xc2, 0xaf, 0xd3, 0xe1,
	0x51, 0xd9, 0x03, 0x7b, 0xf9, 0xe9, 0x16, 0xdc, 0x7e, 0xb8, 0x9f, 0x29, 0x6e, 0x23, 0x7b, 0xc2,
	0x25, 0x73, 0x2d, 0xdc, 0x41, 0xcd, 0xe7, 0x54, 0x31, 0xe9, 0x02, 0x6e, 0xa1, 0xc6, 0x90, 0x4b,
	0xf7, 0xa4, 0xe4, 0xc6, 0x54, 0xaa, 0xa9, 0xdb, 0x28, 0x0b, 0xcb, 0x3f, 0xb8, 0xf6, 0xa3, 0xe1,
	0xaa, 0x20, 0xd6, 0xb7, 0x82, 0x58, 0xeb, 0x82, 0xc0, 0xef, 0x82, 0xc0, 0x3b, 0x4d, 0xe0, 0xb3,
	0x26, 0xf0, 0x45, 0x13, 0xf8, 0xaa, 0x09, 0x2c, 0x35, 0x81, 0x95, 0x26, 0xf0, 0x43, 0x13, 0xf8,
	0xa5, 0x89, 0xb5, 0xd6, 0x04, 0xde, 0xff, 0x24, 0xd6, 0x8b, 0x16, 0x8d, 0xf8, 0x8c, 0xab, 0x45,
	0x74, 0x6a, 0x5e, 0xd9, 0xbd, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xc6, 0x6d, 0x6a, 0xa7,
	0x03, 0x00, 0x00,
}

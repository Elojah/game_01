// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dto.proto

package event

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import ability "github.com/elojah/game_01/pkg/ability"
import geometry "github.com/elojah/game_01/pkg/geometry"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_elojah_game_01_pkg_ulid "github.com/elojah/game_01/pkg/ulid"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Move struct {
	Source   github_com_elojah_game_01_pkg_ulid.ID   `protobuf:"bytes,1,opt,name=Source,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"Source"`
	Targets  []github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,2,rep,name=Targets,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"Targets"`
	Position geometry.Position                       `protobuf:"bytes,3,opt,name=Position" json:"Position"`
}

func (m *Move) Reset()      { *m = Move{} }
func (*Move) ProtoMessage() {}
func (*Move) Descriptor() ([]byte, []int) {
	return fileDescriptor_dto_b2621c185219df87, []int{0}
}
func (m *Move) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Move) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Move.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Move) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Move.Merge(dst, src)
}
func (m *Move) XXX_Size() int {
	return m.Size()
}
func (m *Move) XXX_DiscardUnknown() {
	xxx_messageInfo_Move.DiscardUnknown(m)
}

var xxx_messageInfo_Move proto.InternalMessageInfo

func (m *Move) GetPosition() geometry.Position {
	if m != nil {
		return m.Position
	}
	return geometry.Position{}
}

type Cast struct {
	Source    github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,1,opt,name=Source,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"Source"`
	AbilityID github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,2,opt,name=AbilityID,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"AbilityID"`
	Targets   map[string]ability.Targets            `protobuf:"bytes,3,rep,name=Targets" json:"Targets" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Cast) Reset()      { *m = Cast{} }
func (*Cast) ProtoMessage() {}
func (*Cast) Descriptor() ([]byte, []int) {
	return fileDescriptor_dto_b2621c185219df87, []int{1}
}
func (m *Cast) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cast) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cast.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Cast) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cast.Merge(dst, src)
}
func (m *Cast) XXX_Size() int {
	return m.Size()
}
func (m *Cast) XXX_DiscardUnknown() {
	xxx_messageInfo_Cast.DiscardUnknown(m)
}

var xxx_messageInfo_Cast proto.InternalMessageInfo

func (m *Cast) GetTargets() map[string]ability.Targets {
	if m != nil {
		return m.Targets
	}
	return nil
}

type Loot struct {
	Source github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,1,opt,name=Source,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"Source"`
	ItemID github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,2,opt,name=ItemID,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"ItemID"`
}

func (m *Loot) Reset()      { *m = Loot{} }
func (*Loot) ProtoMessage() {}
func (*Loot) Descriptor() ([]byte, []int) {
	return fileDescriptor_dto_b2621c185219df87, []int{2}
}
func (m *Loot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Loot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Loot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Loot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Loot.Merge(dst, src)
}
func (m *Loot) XXX_Size() int {
	return m.Size()
}
func (m *Loot) XXX_DiscardUnknown() {
	xxx_messageInfo_Loot.DiscardUnknown(m)
}

var xxx_messageInfo_Loot proto.InternalMessageInfo

type Consume struct {
	Source github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,1,opt,name=Source,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"Source"`
	ItemID github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,2,opt,name=ItemID,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"ItemID"`
}

func (m *Consume) Reset()      { *m = Consume{} }
func (*Consume) ProtoMessage() {}
func (*Consume) Descriptor() ([]byte, []int) {
	return fileDescriptor_dto_b2621c185219df87, []int{3}
}
func (m *Consume) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Consume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Consume.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Consume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Consume.Merge(dst, src)
}
func (m *Consume) XXX_Size() int {
	return m.Size()
}
func (m *Consume) XXX_DiscardUnknown() {
	xxx_messageInfo_Consume.DiscardUnknown(m)
}

var xxx_messageInfo_Consume proto.InternalMessageInfo

type Query struct {
	Move    *Move    `protobuf:"bytes,1,opt,name=Move" json:"Move,omitempty"`
	Cast    *Cast    `protobuf:"bytes,2,opt,name=Cast" json:"Cast,omitempty"`
	Loot    *Loot    `protobuf:"bytes,3,opt,name=Loot" json:"Loot,omitempty"`
	Consume *Consume `protobuf:"bytes,4,opt,name=Consume" json:"Consume,omitempty"`
}

func (m *Query) Reset()      { *m = Query{} }
func (*Query) ProtoMessage() {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_dto_b2621c185219df87, []int{4}
}
func (m *Query) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Query.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(dst, src)
}
func (m *Query) XXX_Size() int {
	return m.Size()
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetMove() *Move {
	if m != nil {
		return m.Move
	}
	return nil
}

func (m *Query) GetCast() *Cast {
	if m != nil {
		return m.Cast
	}
	return nil
}

func (m *Query) GetLoot() *Loot {
	if m != nil {
		return m.Loot
	}
	return nil
}

func (m *Query) GetConsume() *Consume {
	if m != nil {
		return m.Consume
	}
	return nil
}

type DTO struct {
	ID    github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,1,opt,name=ID,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"ID"`
	Token github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,2,opt,name=Token,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"Token"`
	Query Query                                 `protobuf:"bytes,3,opt,name=Query" json:"Query"`
}

func (m *DTO) Reset()      { *m = DTO{} }
func (*DTO) ProtoMessage() {}
func (*DTO) Descriptor() ([]byte, []int) {
	return fileDescriptor_dto_b2621c185219df87, []int{5}
}
func (m *DTO) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DTO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DTO.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DTO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DTO.Merge(dst, src)
}
func (m *DTO) XXX_Size() int {
	return m.Size()
}
func (m *DTO) XXX_DiscardUnknown() {
	xxx_messageInfo_DTO.DiscardUnknown(m)
}

var xxx_messageInfo_DTO proto.InternalMessageInfo

func (m *DTO) GetQuery() Query {
	if m != nil {
		return m.Query
	}
	return Query{}
}

func init() {
	proto.RegisterType((*Move)(nil), "event.Move")
	proto.RegisterType((*Cast)(nil), "event.Cast")
	proto.RegisterMapType((map[string]ability.Targets)(nil), "event.Cast.TargetsEntry")
	proto.RegisterType((*Loot)(nil), "event.Loot")
	proto.RegisterType((*Consume)(nil), "event.Consume")
	proto.RegisterType((*Query)(nil), "event.Query")
	proto.RegisterType((*DTO)(nil), "event.DTO")
}
func (this *Move) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Move)
	if !ok {
		that2, ok := that.(Move)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Source.Equal(that1.Source) {
		return false
	}
	if len(this.Targets) != len(that1.Targets) {
		return false
	}
	for i := range this.Targets {
		if !this.Targets[i].Equal(that1.Targets[i]) {
			return false
		}
	}
	if !this.Position.Equal(&that1.Position) {
		return false
	}
	return true
}
func (this *Cast) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cast)
	if !ok {
		that2, ok := that.(Cast)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Source.Equal(that1.Source) {
		return false
	}
	if !this.AbilityID.Equal(that1.AbilityID) {
		return false
	}
	if len(this.Targets) != len(that1.Targets) {
		return false
	}
	for i := range this.Targets {
		a := this.Targets[i]
		b := that1.Targets[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	return true
}
func (this *Loot) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Loot)
	if !ok {
		that2, ok := that.(Loot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Source.Equal(that1.Source) {
		return false
	}
	if !this.ItemID.Equal(that1.ItemID) {
		return false
	}
	return true
}
func (this *Consume) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Consume)
	if !ok {
		that2, ok := that.(Consume)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Source.Equal(that1.Source) {
		return false
	}
	if !this.ItemID.Equal(that1.ItemID) {
		return false
	}
	return true
}
func (this *Query) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Query)
	if !ok {
		that2, ok := that.(Query)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Move.Equal(that1.Move) {
		return false
	}
	if !this.Cast.Equal(that1.Cast) {
		return false
	}
	if !this.Loot.Equal(that1.Loot) {
		return false
	}
	if !this.Consume.Equal(that1.Consume) {
		return false
	}
	return true
}
func (this *DTO) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DTO)
	if !ok {
		that2, ok := that.(DTO)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.Token.Equal(that1.Token) {
		return false
	}
	if !this.Query.Equal(&that1.Query) {
		return false
	}
	return true
}
func (this *Move) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&event.Move{")
	s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	s = append(s, "Targets: "+fmt.Sprintf("%#v", this.Targets)+",\n")
	s = append(s, "Position: "+strings.Replace(this.Position.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Cast) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&event.Cast{")
	s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	s = append(s, "AbilityID: "+fmt.Sprintf("%#v", this.AbilityID)+",\n")
	keysForTargets := make([]string, 0, len(this.Targets))
	for k, _ := range this.Targets {
		keysForTargets = append(keysForTargets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTargets)
	mapStringForTargets := "map[string]ability.Targets{"
	for _, k := range keysForTargets {
		mapStringForTargets += fmt.Sprintf("%#v: %#v,", k, this.Targets[k])
	}
	mapStringForTargets += "}"
	if this.Targets != nil {
		s = append(s, "Targets: "+mapStringForTargets+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Loot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&event.Loot{")
	s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	s = append(s, "ItemID: "+fmt.Sprintf("%#v", this.ItemID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Consume) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&event.Consume{")
	s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	s = append(s, "ItemID: "+fmt.Sprintf("%#v", this.ItemID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Query) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&event.Query{")
	if this.Move != nil {
		s = append(s, "Move: "+fmt.Sprintf("%#v", this.Move)+",\n")
	}
	if this.Cast != nil {
		s = append(s, "Cast: "+fmt.Sprintf("%#v", this.Cast)+",\n")
	}
	if this.Loot != nil {
		s = append(s, "Loot: "+fmt.Sprintf("%#v", this.Loot)+",\n")
	}
	if this.Consume != nil {
		s = append(s, "Consume: "+fmt.Sprintf("%#v", this.Consume)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DTO) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&event.DTO{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "Query: "+strings.Replace(this.Query.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDto(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Move) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Move) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDto(dAtA, i, uint64(m.Source.Size()))
	n1, err := m.Source.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Targets) > 0 {
		for _, msg := range m.Targets {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDto(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintDto(dAtA, i, uint64(m.Position.Size()))
	n2, err := m.Position.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *Cast) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cast) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDto(dAtA, i, uint64(m.Source.Size()))
	n3, err := m.Source.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x12
	i++
	i = encodeVarintDto(dAtA, i, uint64(m.AbilityID.Size()))
	n4, err := m.AbilityID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.Targets) > 0 {
		for k, _ := range m.Targets {
			dAtA[i] = 0x1a
			i++
			v := m.Targets[k]
			msgSize := 0
			if (&v) != nil {
				msgSize = (&v).Size()
				msgSize += 1 + sovDto(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovDto(uint64(len(k))) + msgSize
			i = encodeVarintDto(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintDto(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintDto(dAtA, i, uint64((&v).Size()))
			n5, err := (&v).MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n5
		}
	}
	return i, nil
}

func (m *Loot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Loot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDto(dAtA, i, uint64(m.Source.Size()))
	n6, err := m.Source.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x12
	i++
	i = encodeVarintDto(dAtA, i, uint64(m.ItemID.Size()))
	n7, err := m.ItemID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func (m *Consume) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Consume) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDto(dAtA, i, uint64(m.Source.Size()))
	n8, err := m.Source.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x12
	i++
	i = encodeVarintDto(dAtA, i, uint64(m.ItemID.Size()))
	n9, err := m.ItemID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	return i, nil
}

func (m *Query) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Query) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Move != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDto(dAtA, i, uint64(m.Move.Size()))
		n10, err := m.Move.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Cast != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDto(dAtA, i, uint64(m.Cast.Size()))
		n11, err := m.Cast.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Loot != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDto(dAtA, i, uint64(m.Loot.Size()))
		n12, err := m.Loot.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Consume != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDto(dAtA, i, uint64(m.Consume.Size()))
		n13, err := m.Consume.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *DTO) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DTO) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDto(dAtA, i, uint64(m.ID.Size()))
	n14, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x12
	i++
	i = encodeVarintDto(dAtA, i, uint64(m.Token.Size()))
	n15, err := m.Token.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	dAtA[i] = 0x1a
	i++
	i = encodeVarintDto(dAtA, i, uint64(m.Query.Size()))
	n16, err := m.Query.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	return i, nil
}

func encodeVarintDto(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedMove(r randyDto, easy bool) *Move {
	this := &Move{}
	v1 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.Source = *v1
	v2 := r.Intn(10)
	this.Targets = make([]github_com_elojah_game_01_pkg_ulid.ID, v2)
	for i := 0; i < v2; i++ {
		v3 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
		this.Targets[i] = *v3
	}
	v4 := geometry.NewPopulatedPosition(r, easy)
	this.Position = *v4
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCast(r randyDto, easy bool) *Cast {
	this := &Cast{}
	v5 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.Source = *v5
	v6 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.AbilityID = *v6
	if r.Intn(10) != 0 {
		v7 := r.Intn(10)
		this.Targets = make(map[string]ability.Targets)
		for i := 0; i < v7; i++ {
			this.Targets[randStringDto(r)] = *ability.NewPopulatedTargets(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLoot(r randyDto, easy bool) *Loot {
	this := &Loot{}
	v8 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.Source = *v8
	v9 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.ItemID = *v9
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedConsume(r randyDto, easy bool) *Consume {
	this := &Consume{}
	v10 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.Source = *v10
	v11 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.ItemID = *v11
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedQuery(r randyDto, easy bool) *Query {
	this := &Query{}
	fieldNum := r.Intn(4)
	switch fieldNum {
	case 0:
		this.Move = NewPopulatedMove(r, easy)
	case 1:
		this.Cast = NewPopulatedCast(r, easy)
	case 2:
		this.Loot = NewPopulatedLoot(r, easy)
	case 3:
		this.Consume = NewPopulatedConsume(r, easy)
	}
	return this
}

func NewPopulatedDTO(r randyDto, easy bool) *DTO {
	this := &DTO{}
	v12 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.ID = *v12
	v13 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.Token = *v13
	v14 := NewPopulatedQuery(r, easy)
	this.Query = *v14
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyDto interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneDto(r randyDto) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringDto(r randyDto) string {
	v15 := r.Intn(100)
	tmps := make([]rune, v15)
	for i := 0; i < v15; i++ {
		tmps[i] = randUTF8RuneDto(r)
	}
	return string(tmps)
}
func randUnrecognizedDto(r randyDto, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldDto(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldDto(dAtA []byte, r randyDto, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateDto(dAtA, uint64(key))
		v16 := r.Int63()
		if r.Intn(2) == 0 {
			v16 *= -1
		}
		dAtA = encodeVarintPopulateDto(dAtA, uint64(v16))
	case 1:
		dAtA = encodeVarintPopulateDto(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateDto(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateDto(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateDto(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateDto(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Move) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Source.Size()
	n += 1 + l + sovDto(uint64(l))
	if len(m.Targets) > 0 {
		for _, e := range m.Targets {
			l = e.Size()
			n += 1 + l + sovDto(uint64(l))
		}
	}
	l = m.Position.Size()
	n += 1 + l + sovDto(uint64(l))
	return n
}

func (m *Cast) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Source.Size()
	n += 1 + l + sovDto(uint64(l))
	l = m.AbilityID.Size()
	n += 1 + l + sovDto(uint64(l))
	if len(m.Targets) > 0 {
		for k, v := range m.Targets {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovDto(uint64(len(k))) + 1 + l + sovDto(uint64(l))
			n += mapEntrySize + 1 + sovDto(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Loot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Source.Size()
	n += 1 + l + sovDto(uint64(l))
	l = m.ItemID.Size()
	n += 1 + l + sovDto(uint64(l))
	return n
}

func (m *Consume) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Source.Size()
	n += 1 + l + sovDto(uint64(l))
	l = m.ItemID.Size()
	n += 1 + l + sovDto(uint64(l))
	return n
}

func (m *Query) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Move != nil {
		l = m.Move.Size()
		n += 1 + l + sovDto(uint64(l))
	}
	if m.Cast != nil {
		l = m.Cast.Size()
		n += 1 + l + sovDto(uint64(l))
	}
	if m.Loot != nil {
		l = m.Loot.Size()
		n += 1 + l + sovDto(uint64(l))
	}
	if m.Consume != nil {
		l = m.Consume.Size()
		n += 1 + l + sovDto(uint64(l))
	}
	return n
}

func (m *DTO) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovDto(uint64(l))
	l = m.Token.Size()
	n += 1 + l + sovDto(uint64(l))
	l = m.Query.Size()
	n += 1 + l + sovDto(uint64(l))
	return n
}

func sovDto(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDto(x uint64) (n int) {
	return sovDto(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Move) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Move{`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`Targets:` + fmt.Sprintf("%v", this.Targets) + `,`,
		`Position:` + strings.Replace(strings.Replace(this.Position.String(), "Position", "geometry.Position", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cast) String() string {
	if this == nil {
		return "nil"
	}
	keysForTargets := make([]string, 0, len(this.Targets))
	for k, _ := range this.Targets {
		keysForTargets = append(keysForTargets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTargets)
	mapStringForTargets := "map[string]ability.Targets{"
	for _, k := range keysForTargets {
		mapStringForTargets += fmt.Sprintf("%v: %v,", k, this.Targets[k])
	}
	mapStringForTargets += "}"
	s := strings.Join([]string{`&Cast{`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`AbilityID:` + fmt.Sprintf("%v", this.AbilityID) + `,`,
		`Targets:` + mapStringForTargets + `,`,
		`}`,
	}, "")
	return s
}
func (this *Loot) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Loot{`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`ItemID:` + fmt.Sprintf("%v", this.ItemID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Consume) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Consume{`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`ItemID:` + fmt.Sprintf("%v", this.ItemID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Query) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Query{`,
		`Move:` + strings.Replace(fmt.Sprintf("%v", this.Move), "Move", "Move", 1) + `,`,
		`Cast:` + strings.Replace(fmt.Sprintf("%v", this.Cast), "Cast", "Cast", 1) + `,`,
		`Loot:` + strings.Replace(fmt.Sprintf("%v", this.Loot), "Loot", "Loot", 1) + `,`,
		`Consume:` + strings.Replace(fmt.Sprintf("%v", this.Consume), "Consume", "Consume", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DTO) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DTO{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`Query:` + strings.Replace(strings.Replace(this.Query.String(), "Query", "Query", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDto(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (this *Query) GetValue() interface{} {
	if this.Move != nil {
		return this.Move
	}
	if this.Cast != nil {
		return this.Cast
	}
	if this.Loot != nil {
		return this.Loot
	}
	if this.Consume != nil {
		return this.Consume
	}
	return nil
}

func (this *Query) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *Move:
		this.Move = vt
	case *Cast:
		this.Cast = vt
	case *Loot:
		this.Loot = vt
	case *Consume:
		this.Consume = vt
	default:
		return false
	}
	return true
}
func (m *Move) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Move: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Move: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_elojah_game_01_pkg_ulid.ID
			m.Targets = append(m.Targets, v)
			if err := m.Targets[len(m.Targets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cast) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cast: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cast: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AbilityID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Targets == nil {
				m.Targets = make(map[string]ability.Targets)
			}
			var mapkey string
			mapvalue := &ability.Targets{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDto
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDto
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDto
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDto
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthDto
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthDto
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ability.Targets{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDto(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthDto
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Targets[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Loot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ItemID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Consume) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Consume: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Consume: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ItemID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Query) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Query: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Query: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Move", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Move == nil {
				m.Move = &Move{}
			}
			if err := m.Move.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cast", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cast == nil {
				m.Cast = &Cast{}
			}
			if err := m.Cast.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Loot == nil {
				m.Loot = &Loot{}
			}
			if err := m.Loot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consume", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Consume == nil {
				m.Consume = &Consume{}
			}
			if err := m.Consume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DTO) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DTO: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DTO: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDto(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDto
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDto
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDto
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDto(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDto = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDto   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dto.proto", fileDescriptor_dto_b2621c185219df87) }

var fileDescriptor_dto_b2621c185219df87 = []byte{
	// 550 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xf6, 0xb3, 0x9d, 0x96, 0x9c, 0x23, 0x54, 0xdd, 0x64, 0x65, 0x38, 0x47, 0x91, 0x40, 0x59,
	0x6a, 0x43, 0x0a, 0x52, 0x55, 0x09, 0x09, 0xf2, 0x43, 0x28, 0xa2, 0x08, 0x30, 0xd9, 0x91, 0xd3,
	0x1e, 0xae, 0xc9, 0x8f, 0x8b, 0x9c, 0x73, 0xa4, 0x6c, 0xfc, 0x09, 0x0c, 0x48, 0x48, 0x4c, 0x88,
	0x89, 0x9d, 0x85, 0x91, 0x31, 0x03, 0x43, 0xc6, 0x8a, 0xa1, 0x22, 0xce, 0xc2, 0xd8, 0x91, 0x11,
	0xf9, 0xee, 0xdc, 0x66, 0xaa, 0x44, 0xd4, 0x81, 0xed, 0xee, 0xbd, 0xf7, 0x7d, 0x7e, 0xdf, 0xf7,
	0xde, 0x19, 0x15, 0x8f, 0x39, 0x73, 0xc7, 0x31, 0xe3, 0x0c, 0x17, 0xe8, 0x94, 0x8e, 0x78, 0x79,
	0x37, 0x8c, 0xf8, 0x49, 0xd2, 0x73, 0x8f, 0xd8, 0xd0, 0x0b, 0x59, 0xc8, 0x3c, 0x91, 0xed, 0x25,
	0xaf, 0xc5, 0x4d, 0x5c, 0xc4, 0x49, 0xa2, 0xca, 0xf7, 0xd7, 0xca, 0xe9, 0x80, 0xbd, 0x09, 0x4e,
	0xbc, 0x30, 0x18, 0xd2, 0x57, 0x77, 0xee, 0x7a, 0xe3, 0x7e, 0xe8, 0x85, 0x94, 0x0d, 0x29, 0x8f,
	0x67, 0xde, 0x98, 0x4d, 0x22, 0x1e, 0xb1, 0x91, 0x82, 0xed, 0x5d, 0x0d, 0x0b, 0x7a, 0xd1, 0x20,
	0xe2, 0x33, 0x8f, 0x07, 0x71, 0x48, 0xf9, 0x44, 0x82, 0xaa, 0x3f, 0x00, 0x99, 0x4f, 0xd9, 0x94,
	0xe2, 0x36, 0xda, 0x7a, 0xc9, 0x92, 0xf8, 0x88, 0xda, 0x50, 0x81, 0x5a, 0xa9, 0xb1, 0x3b, 0x3f,
	0x73, 0xb4, 0x9f, 0x67, 0xce, 0xad, 0xab, 0x59, 0x93, 0x41, 0x74, 0xec, 0x76, 0x5a, 0xbe, 0x02,
	0xe3, 0xc7, 0x68, 0xbb, 0x2b, 0x3f, 0x60, 0xeb, 0x15, 0xe3, 0xdf, 0x79, 0x72, 0x34, 0xbe, 0x87,
	0x6e, 0x3c, 0x57, 0xfa, 0x6c, 0xa3, 0x02, 0x35, 0xab, 0x8e, 0xdd, 0x5c, 0xb9, 0x9b, 0x67, 0x1a,
	0x66, 0xc6, 0xee, 0x5f, 0x54, 0x56, 0x3f, 0xeb, 0xc8, 0x6c, 0x06, 0x13, 0x7e, 0x5d, 0x72, 0x9e,
	0xa0, 0xe2, 0x23, 0xe9, 0x5b, 0xa7, 0x65, 0xeb, 0x9b, 0x30, 0x5d, 0xe2, 0xf1, 0xfe, 0xa5, 0x37,
	0x46, 0xc5, 0xa8, 0x59, 0x75, 0xdb, 0x15, 0xfb, 0xe1, 0x66, 0x1d, 0xbb, 0x2a, 0xd5, 0x1e, 0xf1,
	0x78, 0xa6, 0x74, 0xe5, 0xe5, 0xe5, 0x43, 0x54, 0x5a, 0x4f, 0xe3, 0x1d, 0x64, 0xf4, 0xe9, 0x4c,
	0x48, 0x2b, 0xfa, 0xd9, 0x11, 0xdf, 0x46, 0x85, 0x69, 0x30, 0x48, 0xa8, 0x68, 0xd2, 0xaa, 0xef,
	0xb8, 0x6a, 0xdc, 0x39, 0xad, 0x2f, 0xd3, 0x07, 0xfa, 0x3e, 0x54, 0xdf, 0x03, 0x32, 0x0f, 0x19,
	0xbb, 0x36, 0x93, 0xda, 0x68, 0xab, 0xc3, 0xe9, 0x70, 0x53, 0x87, 0x14, 0xb8, 0xfa, 0x01, 0xd0,
	0x76, 0x93, 0x8d, 0x26, 0xc9, 0x90, 0xfe, 0x67, 0x9d, 0x7d, 0x04, 0x54, 0x78, 0x91, 0xd0, 0x78,
	0x86, 0x1d, 0xf9, 0x5a, 0x44, 0x57, 0x56, 0xdd, 0x52, 0xf3, 0xcb, 0x42, 0xbe, 0x7c, 0x46, 0x8e,
	0xdc, 0x3f, 0x35, 0x06, 0x6b, 0x6d, 0xc0, 0xbe, 0x5c, 0x4c, 0x47, 0x7a, 0xaf, 0x76, 0x3a, 0x2f,
	0xc8, 0x42, 0xbe, 0x1c, 0x4a, 0xed, 0xc2, 0x05, 0xdb, 0x14, 0x35, 0x37, 0x73, 0x12, 0x19, 0xf5,
	0xf3, 0xf4, 0x81, 0x39, 0xff, 0xe4, 0x40, 0xf5, 0x2b, 0x20, 0xa3, 0xd5, 0x7d, 0x86, 0x1f, 0x20,
	0xbd, 0xd3, 0xda, 0xcc, 0x2e, 0xbd, 0xd3, 0xc2, 0x4d, 0x54, 0xe8, 0xb2, 0x3e, 0x1d, 0x6d, 0xe6,
	0x94, 0xc4, 0xe2, 0x9a, 0xf2, 0x49, 0xa9, 0x2b, 0xa9, 0xce, 0x45, 0x4c, 0xed, 0xb4, 0x2c, 0x68,
	0x3c, 0x5c, 0x2c, 0x89, 0x76, 0xba, 0x24, 0xda, 0xf9, 0x92, 0xc0, 0x9f, 0x25, 0x81, 0xb7, 0x29,
	0x81, 0x2f, 0x29, 0x81, 0x6f, 0x29, 0x81, 0xef, 0x29, 0x81, 0x79, 0x4a, 0x60, 0x91, 0x12, 0xf8,
	0x95, 0x12, 0xf8, 0x9d, 0x12, 0xed, 0x3c, 0x25, 0xf0, 0x6e, 0x45, 0xb4, 0xc5, 0x8a, 0x68, 0xa7,
	0x2b, 0xa2, 0xf5, 0xb6, 0xc4, 0x0f, 0x6c, 0xef, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x65, 0xcc,
	0x5a, 0x58, 0x6f, 0x05, 0x00, 0x00,
}

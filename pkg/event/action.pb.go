// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: action.proto

package event

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import ability "github.com/elojah/game_01/pkg/ability"
import entity "github.com/elojah/game_01/pkg/entity"
import geometry "github.com/elojah/game_01/pkg/geometry"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_elojah_game_01_pkg_ulid "github.com/elojah/game_01/pkg/ulid"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Cancel struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cancel) Reset()      { *m = Cancel{} }
func (*Cancel) ProtoMessage() {}
func (*Cancel) Descriptor() ([]byte, []int) {
	return fileDescriptor_action_98c97669884f4595, []int{0}
}
func (m *Cancel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cancel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cancel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Cancel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cancel.Merge(dst, src)
}
func (m *Cancel) XXX_Size() int {
	return m.Size()
}
func (m *Cancel) XXX_DiscardUnknown() {
	xxx_messageInfo_Cancel.DiscardUnknown(m)
}

var xxx_messageInfo_Cancel proto.InternalMessageInfo

type MoveTarget struct {
	Position             geometry.Position `protobuf:"bytes,1,opt,name=Position,json=position" json:"Position"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MoveTarget) Reset()      { *m = MoveTarget{} }
func (*MoveTarget) ProtoMessage() {}
func (*MoveTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_action_98c97669884f4595, []int{1}
}
func (m *MoveTarget) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoveTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoveTarget.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MoveTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveTarget.Merge(dst, src)
}
func (m *MoveTarget) XXX_Size() int {
	return m.Size()
}
func (m *MoveTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveTarget.DiscardUnknown(m)
}

var xxx_messageInfo_MoveTarget proto.InternalMessageInfo

func (m *MoveTarget) GetPosition() geometry.Position {
	if m != nil {
		return m.Position
	}
	return geometry.Position{}
}

type CastSource struct {
	Targets              map[string]ability.Targets            `protobuf:"bytes,1,rep,name=Targets,json=targets" json:"Targets" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	AbilityID            github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,2,opt,name=AbilityID,json=abilityID,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"AbilityID"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *CastSource) Reset()      { *m = CastSource{} }
func (*CastSource) ProtoMessage() {}
func (*CastSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_action_98c97669884f4595, []int{2}
}
func (m *CastSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CastSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CastSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CastSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CastSource.Merge(dst, src)
}
func (m *CastSource) XXX_Size() int {
	return m.Size()
}
func (m *CastSource) XXX_DiscardUnknown() {
	xxx_messageInfo_CastSource.DiscardUnknown(m)
}

var xxx_messageInfo_CastSource proto.InternalMessageInfo

func (m *CastSource) GetTargets() map[string]ability.Targets {
	if m != nil {
		return m.Targets
	}
	return nil
}

type PerformSource struct {
	Targets              map[string]ability.Targets            `protobuf:"bytes,1,rep,name=Targets,json=targets" json:"Targets" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	AbilityID            github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,2,opt,name=AbilityID,json=abilityID,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"AbilityID"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *PerformSource) Reset()      { *m = PerformSource{} }
func (*PerformSource) ProtoMessage() {}
func (*PerformSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_action_98c97669884f4595, []int{3}
}
func (m *PerformSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerformSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerformSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PerformSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerformSource.Merge(dst, src)
}
func (m *PerformSource) XXX_Size() int {
	return m.Size()
}
func (m *PerformSource) XXX_DiscardUnknown() {
	xxx_messageInfo_PerformSource.DiscardUnknown(m)
}

var xxx_messageInfo_PerformSource proto.InternalMessageInfo

func (m *PerformSource) GetTargets() map[string]ability.Targets {
	if m != nil {
		return m.Targets
	}
	return nil
}

type PerformTarget struct {
	Source               entity.E                              `protobuf:"bytes,1,opt,name=Source,json=source" json:"Source"`
	AbilityID            github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,2,opt,name=AbilityID,json=abilityID,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"AbilityID"`
	ComponentID          github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,3,opt,name=ComponentID,json=componentID,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"ComponentID"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *PerformTarget) Reset()      { *m = PerformTarget{} }
func (*PerformTarget) ProtoMessage() {}
func (*PerformTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_action_98c97669884f4595, []int{4}
}
func (m *PerformTarget) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerformTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerformTarget.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PerformTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerformTarget.Merge(dst, src)
}
func (m *PerformTarget) XXX_Size() int {
	return m.Size()
}
func (m *PerformTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_PerformTarget.DiscardUnknown(m)
}

var xxx_messageInfo_PerformTarget proto.InternalMessageInfo

func (m *PerformTarget) GetSource() entity.E {
	if m != nil {
		return m.Source
	}
	return entity.E{}
}

type PerformFeedback struct {
	Target               entity.E                              `protobuf:"bytes,1,opt,name=Target,json=target" json:"Target"`
	ID                   github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,2,opt,name=ID,json=iD,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"ID"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *PerformFeedback) Reset()      { *m = PerformFeedback{} }
func (*PerformFeedback) ProtoMessage() {}
func (*PerformFeedback) Descriptor() ([]byte, []int) {
	return fileDescriptor_action_98c97669884f4595, []int{5}
}
func (m *PerformFeedback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerformFeedback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerformFeedback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PerformFeedback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerformFeedback.Merge(dst, src)
}
func (m *PerformFeedback) XXX_Size() int {
	return m.Size()
}
func (m *PerformFeedback) XXX_DiscardUnknown() {
	xxx_messageInfo_PerformFeedback.DiscardUnknown(m)
}

var xxx_messageInfo_PerformFeedback proto.InternalMessageInfo

func (m *PerformFeedback) GetTarget() entity.E {
	if m != nil {
		return m.Target
	}
	return entity.E{}
}

type LootSource struct {
	TargetID             github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,1,opt,name=TargetID,json=targetID,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"TargetID"`
	ItemID               github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,2,opt,name=ItemID,json=itemID,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"ItemID"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *LootSource) Reset()      { *m = LootSource{} }
func (*LootSource) ProtoMessage() {}
func (*LootSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_action_98c97669884f4595, []int{6}
}
func (m *LootSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LootSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LootSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LootSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LootSource.Merge(dst, src)
}
func (m *LootSource) XXX_Size() int {
	return m.Size()
}
func (m *LootSource) XXX_DiscardUnknown() {
	xxx_messageInfo_LootSource.DiscardUnknown(m)
}

var xxx_messageInfo_LootSource proto.InternalMessageInfo

type LootTarget struct {
	Source               entity.E                              `protobuf:"bytes,1,opt,name=Source,json=source" json:"Source"`
	ItemID               github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,2,opt,name=ItemID,json=itemID,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"ItemID"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *LootTarget) Reset()      { *m = LootTarget{} }
func (*LootTarget) ProtoMessage() {}
func (*LootTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_action_98c97669884f4595, []int{7}
}
func (m *LootTarget) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LootTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LootTarget.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LootTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LootTarget.Merge(dst, src)
}
func (m *LootTarget) XXX_Size() int {
	return m.Size()
}
func (m *LootTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_LootTarget.DiscardUnknown(m)
}

var xxx_messageInfo_LootTarget proto.InternalMessageInfo

func (m *LootTarget) GetSource() entity.E {
	if m != nil {
		return m.Source
	}
	return entity.E{}
}

type LootFeedback struct {
	TargetID             github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,1,opt,name=TargetID,json=targetID,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"TargetID"`
	ItemID               github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,2,opt,name=ItemID,json=itemID,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"ItemID"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *LootFeedback) Reset()      { *m = LootFeedback{} }
func (*LootFeedback) ProtoMessage() {}
func (*LootFeedback) Descriptor() ([]byte, []int) {
	return fileDescriptor_action_98c97669884f4595, []int{8}
}
func (m *LootFeedback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LootFeedback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LootFeedback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LootFeedback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LootFeedback.Merge(dst, src)
}
func (m *LootFeedback) XXX_Size() int {
	return m.Size()
}
func (m *LootFeedback) XXX_DiscardUnknown() {
	xxx_messageInfo_LootFeedback.DiscardUnknown(m)
}

var xxx_messageInfo_LootFeedback proto.InternalMessageInfo

type ConsumeSource struct {
	TargetID             github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,1,opt,name=TargetID,json=targetID,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"TargetID"`
	ItemID               github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,2,opt,name=ItemID,json=itemID,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"ItemID"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ConsumeSource) Reset()      { *m = ConsumeSource{} }
func (*ConsumeSource) ProtoMessage() {}
func (*ConsumeSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_action_98c97669884f4595, []int{9}
}
func (m *ConsumeSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumeSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumeSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ConsumeSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumeSource.Merge(dst, src)
}
func (m *ConsumeSource) XXX_Size() int {
	return m.Size()
}
func (m *ConsumeSource) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumeSource.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumeSource proto.InternalMessageInfo

type ConsumeTarget struct {
	Source               entity.E                              `protobuf:"bytes,1,opt,name=Source,json=source" json:"Source"`
	ItemID               github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,2,opt,name=ItemID,json=itemID,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"ItemID"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ConsumeTarget) Reset()      { *m = ConsumeTarget{} }
func (*ConsumeTarget) ProtoMessage() {}
func (*ConsumeTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_action_98c97669884f4595, []int{10}
}
func (m *ConsumeTarget) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumeTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumeTarget.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ConsumeTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumeTarget.Merge(dst, src)
}
func (m *ConsumeTarget) XXX_Size() int {
	return m.Size()
}
func (m *ConsumeTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumeTarget.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumeTarget proto.InternalMessageInfo

func (m *ConsumeTarget) GetSource() entity.E {
	if m != nil {
		return m.Source
	}
	return entity.E{}
}

type ConsumeFeedback struct {
	TargetID             github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,1,opt,name=TargetID,json=targetID,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"TargetID"`
	ItemID               github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,2,opt,name=ItemID,json=itemID,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"ItemID"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ConsumeFeedback) Reset()      { *m = ConsumeFeedback{} }
func (*ConsumeFeedback) ProtoMessage() {}
func (*ConsumeFeedback) Descriptor() ([]byte, []int) {
	return fileDescriptor_action_98c97669884f4595, []int{11}
}
func (m *ConsumeFeedback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumeFeedback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumeFeedback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ConsumeFeedback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumeFeedback.Merge(dst, src)
}
func (m *ConsumeFeedback) XXX_Size() int {
	return m.Size()
}
func (m *ConsumeFeedback) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumeFeedback.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumeFeedback proto.InternalMessageInfo

type Action struct {
	Cancel               *Cancel          `protobuf:"bytes,1,opt,name=Cancel,json=cancel" json:"Cancel,omitempty"`
	MoveTarget           *MoveTarget      `protobuf:"bytes,2,opt,name=MoveTarget,json=moveTarget" json:"MoveTarget,omitempty"`
	CastSource           *CastSource      `protobuf:"bytes,3,opt,name=CastSource,json=castSource" json:"CastSource,omitempty"`
	PerformSource        *PerformSource   `protobuf:"bytes,4,opt,name=PerformSource,json=performSource" json:"PerformSource,omitempty"`
	PerformTarget        *PerformTarget   `protobuf:"bytes,5,opt,name=PerformTarget,json=performTarget" json:"PerformTarget,omitempty"`
	PerformFeedback      *PerformFeedback `protobuf:"bytes,6,opt,name=PerformFeedback,json=performFeedback" json:"PerformFeedback,omitempty"`
	LootSource           *LootSource      `protobuf:"bytes,7,opt,name=LootSource,json=lootSource" json:"LootSource,omitempty"`
	LootTarget           *LootTarget      `protobuf:"bytes,8,opt,name=LootTarget,json=lootTarget" json:"LootTarget,omitempty"`
	LootFeedback         *LootFeedback    `protobuf:"bytes,9,opt,name=LootFeedback,json=lootFeedback" json:"LootFeedback,omitempty"`
	ConsumeSource        *ConsumeSource   `protobuf:"bytes,10,opt,name=ConsumeSource,json=consumeSource" json:"ConsumeSource,omitempty"`
	ConsumeTarget        *ConsumeTarget   `protobuf:"bytes,11,opt,name=ConsumeTarget,json=consumeTarget" json:"ConsumeTarget,omitempty"`
	ConsumeFeedback      *ConsumeFeedback `protobuf:"bytes,12,opt,name=ConsumeFeedback,json=consumeFeedback" json:"ConsumeFeedback,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Action) Reset()      { *m = Action{} }
func (*Action) ProtoMessage() {}
func (*Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_action_98c97669884f4595, []int{12}
}
func (m *Action) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Action.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Action.Merge(dst, src)
}
func (m *Action) XXX_Size() int {
	return m.Size()
}
func (m *Action) XXX_DiscardUnknown() {
	xxx_messageInfo_Action.DiscardUnknown(m)
}

var xxx_messageInfo_Action proto.InternalMessageInfo

func (m *Action) GetCancel() *Cancel {
	if m != nil {
		return m.Cancel
	}
	return nil
}

func (m *Action) GetMoveTarget() *MoveTarget {
	if m != nil {
		return m.MoveTarget
	}
	return nil
}

func (m *Action) GetCastSource() *CastSource {
	if m != nil {
		return m.CastSource
	}
	return nil
}

func (m *Action) GetPerformSource() *PerformSource {
	if m != nil {
		return m.PerformSource
	}
	return nil
}

func (m *Action) GetPerformTarget() *PerformTarget {
	if m != nil {
		return m.PerformTarget
	}
	return nil
}

func (m *Action) GetPerformFeedback() *PerformFeedback {
	if m != nil {
		return m.PerformFeedback
	}
	return nil
}

func (m *Action) GetLootSource() *LootSource {
	if m != nil {
		return m.LootSource
	}
	return nil
}

func (m *Action) GetLootTarget() *LootTarget {
	if m != nil {
		return m.LootTarget
	}
	return nil
}

func (m *Action) GetLootFeedback() *LootFeedback {
	if m != nil {
		return m.LootFeedback
	}
	return nil
}

func (m *Action) GetConsumeSource() *ConsumeSource {
	if m != nil {
		return m.ConsumeSource
	}
	return nil
}

func (m *Action) GetConsumeTarget() *ConsumeTarget {
	if m != nil {
		return m.ConsumeTarget
	}
	return nil
}

func (m *Action) GetConsumeFeedback() *ConsumeFeedback {
	if m != nil {
		return m.ConsumeFeedback
	}
	return nil
}

func init() {
	proto.RegisterType((*Cancel)(nil), "event.Cancel")
	proto.RegisterType((*MoveTarget)(nil), "event.MoveTarget")
	proto.RegisterType((*CastSource)(nil), "event.CastSource")
	proto.RegisterMapType((map[string]ability.Targets)(nil), "event.CastSource.TargetsEntry")
	proto.RegisterType((*PerformSource)(nil), "event.PerformSource")
	proto.RegisterMapType((map[string]ability.Targets)(nil), "event.PerformSource.TargetsEntry")
	proto.RegisterType((*PerformTarget)(nil), "event.PerformTarget")
	proto.RegisterType((*PerformFeedback)(nil), "event.PerformFeedback")
	proto.RegisterType((*LootSource)(nil), "event.LootSource")
	proto.RegisterType((*LootTarget)(nil), "event.LootTarget")
	proto.RegisterType((*LootFeedback)(nil), "event.LootFeedback")
	proto.RegisterType((*ConsumeSource)(nil), "event.ConsumeSource")
	proto.RegisterType((*ConsumeTarget)(nil), "event.ConsumeTarget")
	proto.RegisterType((*ConsumeFeedback)(nil), "event.ConsumeFeedback")
	proto.RegisterType((*Action)(nil), "event.Action")
}
func (this *Cancel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cancel)
	if !ok {
		that2, ok := that.(Cancel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MoveTarget) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MoveTarget)
	if !ok {
		that2, ok := that.(MoveTarget)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Position.Equal(&that1.Position) {
		return false
	}
	return true
}
func (this *CastSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CastSource)
	if !ok {
		that2, ok := that.(CastSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Targets) != len(that1.Targets) {
		return false
	}
	for i := range this.Targets {
		a := this.Targets[i]
		b := that1.Targets[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if !this.AbilityID.Equal(that1.AbilityID) {
		return false
	}
	return true
}
func (this *PerformSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerformSource)
	if !ok {
		that2, ok := that.(PerformSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Targets) != len(that1.Targets) {
		return false
	}
	for i := range this.Targets {
		a := this.Targets[i]
		b := that1.Targets[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if !this.AbilityID.Equal(that1.AbilityID) {
		return false
	}
	return true
}
func (this *PerformTarget) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerformTarget)
	if !ok {
		that2, ok := that.(PerformTarget)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Source.Equal(&that1.Source) {
		return false
	}
	if !this.AbilityID.Equal(that1.AbilityID) {
		return false
	}
	if !this.ComponentID.Equal(that1.ComponentID) {
		return false
	}
	return true
}
func (this *PerformFeedback) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PerformFeedback)
	if !ok {
		that2, ok := that.(PerformFeedback)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Target.Equal(&that1.Target) {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *LootSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LootSource)
	if !ok {
		that2, ok := that.(LootSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TargetID.Equal(that1.TargetID) {
		return false
	}
	if !this.ItemID.Equal(that1.ItemID) {
		return false
	}
	return true
}
func (this *LootTarget) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LootTarget)
	if !ok {
		that2, ok := that.(LootTarget)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Source.Equal(&that1.Source) {
		return false
	}
	if !this.ItemID.Equal(that1.ItemID) {
		return false
	}
	return true
}
func (this *LootFeedback) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LootFeedback)
	if !ok {
		that2, ok := that.(LootFeedback)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TargetID.Equal(that1.TargetID) {
		return false
	}
	if !this.ItemID.Equal(that1.ItemID) {
		return false
	}
	return true
}
func (this *ConsumeSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsumeSource)
	if !ok {
		that2, ok := that.(ConsumeSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TargetID.Equal(that1.TargetID) {
		return false
	}
	if !this.ItemID.Equal(that1.ItemID) {
		return false
	}
	return true
}
func (this *ConsumeTarget) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsumeTarget)
	if !ok {
		that2, ok := that.(ConsumeTarget)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Source.Equal(&that1.Source) {
		return false
	}
	if !this.ItemID.Equal(that1.ItemID) {
		return false
	}
	return true
}
func (this *ConsumeFeedback) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConsumeFeedback)
	if !ok {
		that2, ok := that.(ConsumeFeedback)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TargetID.Equal(that1.TargetID) {
		return false
	}
	if !this.ItemID.Equal(that1.ItemID) {
		return false
	}
	return true
}
func (this *Action) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Action)
	if !ok {
		that2, ok := that.(Action)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cancel.Equal(that1.Cancel) {
		return false
	}
	if !this.MoveTarget.Equal(that1.MoveTarget) {
		return false
	}
	if !this.CastSource.Equal(that1.CastSource) {
		return false
	}
	if !this.PerformSource.Equal(that1.PerformSource) {
		return false
	}
	if !this.PerformTarget.Equal(that1.PerformTarget) {
		return false
	}
	if !this.PerformFeedback.Equal(that1.PerformFeedback) {
		return false
	}
	if !this.LootSource.Equal(that1.LootSource) {
		return false
	}
	if !this.LootTarget.Equal(that1.LootTarget) {
		return false
	}
	if !this.LootFeedback.Equal(that1.LootFeedback) {
		return false
	}
	if !this.ConsumeSource.Equal(that1.ConsumeSource) {
		return false
	}
	if !this.ConsumeTarget.Equal(that1.ConsumeTarget) {
		return false
	}
	if !this.ConsumeFeedback.Equal(that1.ConsumeFeedback) {
		return false
	}
	return true
}
func (this *Cancel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&event.Cancel{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MoveTarget) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&event.MoveTarget{")
	s = append(s, "Position: "+strings.Replace(this.Position.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CastSource) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&event.CastSource{")
	keysForTargets := make([]string, 0, len(this.Targets))
	for k, _ := range this.Targets {
		keysForTargets = append(keysForTargets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTargets)
	mapStringForTargets := "map[string]ability.Targets{"
	for _, k := range keysForTargets {
		mapStringForTargets += fmt.Sprintf("%#v: %#v,", k, this.Targets[k])
	}
	mapStringForTargets += "}"
	if this.Targets != nil {
		s = append(s, "Targets: "+mapStringForTargets+",\n")
	}
	s = append(s, "AbilityID: "+fmt.Sprintf("%#v", this.AbilityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PerformSource) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&event.PerformSource{")
	keysForTargets := make([]string, 0, len(this.Targets))
	for k, _ := range this.Targets {
		keysForTargets = append(keysForTargets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTargets)
	mapStringForTargets := "map[string]ability.Targets{"
	for _, k := range keysForTargets {
		mapStringForTargets += fmt.Sprintf("%#v: %#v,", k, this.Targets[k])
	}
	mapStringForTargets += "}"
	if this.Targets != nil {
		s = append(s, "Targets: "+mapStringForTargets+",\n")
	}
	s = append(s, "AbilityID: "+fmt.Sprintf("%#v", this.AbilityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PerformTarget) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&event.PerformTarget{")
	s = append(s, "Source: "+strings.Replace(this.Source.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "AbilityID: "+fmt.Sprintf("%#v", this.AbilityID)+",\n")
	s = append(s, "ComponentID: "+fmt.Sprintf("%#v", this.ComponentID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PerformFeedback) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&event.PerformFeedback{")
	s = append(s, "Target: "+strings.Replace(this.Target.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LootSource) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&event.LootSource{")
	s = append(s, "TargetID: "+fmt.Sprintf("%#v", this.TargetID)+",\n")
	s = append(s, "ItemID: "+fmt.Sprintf("%#v", this.ItemID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LootTarget) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&event.LootTarget{")
	s = append(s, "Source: "+strings.Replace(this.Source.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "ItemID: "+fmt.Sprintf("%#v", this.ItemID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LootFeedback) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&event.LootFeedback{")
	s = append(s, "TargetID: "+fmt.Sprintf("%#v", this.TargetID)+",\n")
	s = append(s, "ItemID: "+fmt.Sprintf("%#v", this.ItemID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsumeSource) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&event.ConsumeSource{")
	s = append(s, "TargetID: "+fmt.Sprintf("%#v", this.TargetID)+",\n")
	s = append(s, "ItemID: "+fmt.Sprintf("%#v", this.ItemID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsumeTarget) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&event.ConsumeTarget{")
	s = append(s, "Source: "+strings.Replace(this.Source.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "ItemID: "+fmt.Sprintf("%#v", this.ItemID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConsumeFeedback) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&event.ConsumeFeedback{")
	s = append(s, "TargetID: "+fmt.Sprintf("%#v", this.TargetID)+",\n")
	s = append(s, "ItemID: "+fmt.Sprintf("%#v", this.ItemID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Action) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&event.Action{")
	if this.Cancel != nil {
		s = append(s, "Cancel: "+fmt.Sprintf("%#v", this.Cancel)+",\n")
	}
	if this.MoveTarget != nil {
		s = append(s, "MoveTarget: "+fmt.Sprintf("%#v", this.MoveTarget)+",\n")
	}
	if this.CastSource != nil {
		s = append(s, "CastSource: "+fmt.Sprintf("%#v", this.CastSource)+",\n")
	}
	if this.PerformSource != nil {
		s = append(s, "PerformSource: "+fmt.Sprintf("%#v", this.PerformSource)+",\n")
	}
	if this.PerformTarget != nil {
		s = append(s, "PerformTarget: "+fmt.Sprintf("%#v", this.PerformTarget)+",\n")
	}
	if this.PerformFeedback != nil {
		s = append(s, "PerformFeedback: "+fmt.Sprintf("%#v", this.PerformFeedback)+",\n")
	}
	if this.LootSource != nil {
		s = append(s, "LootSource: "+fmt.Sprintf("%#v", this.LootSource)+",\n")
	}
	if this.LootTarget != nil {
		s = append(s, "LootTarget: "+fmt.Sprintf("%#v", this.LootTarget)+",\n")
	}
	if this.LootFeedback != nil {
		s = append(s, "LootFeedback: "+fmt.Sprintf("%#v", this.LootFeedback)+",\n")
	}
	if this.ConsumeSource != nil {
		s = append(s, "ConsumeSource: "+fmt.Sprintf("%#v", this.ConsumeSource)+",\n")
	}
	if this.ConsumeTarget != nil {
		s = append(s, "ConsumeTarget: "+fmt.Sprintf("%#v", this.ConsumeTarget)+",\n")
	}
	if this.ConsumeFeedback != nil {
		s = append(s, "ConsumeFeedback: "+fmt.Sprintf("%#v", this.ConsumeFeedback)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAction(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Cancel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cancel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MoveTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoveTarget) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAction(dAtA, i, uint64(m.Position.Size()))
	n1, err := m.Position.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *CastSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CastSource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for k, _ := range m.Targets {
			dAtA[i] = 0xa
			i++
			v := m.Targets[k]
			msgSize := 0
			if (&v) != nil {
				msgSize = (&v).Size()
				msgSize += 1 + sovAction(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovAction(uint64(len(k))) + msgSize
			i = encodeVarintAction(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAction(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintAction(dAtA, i, uint64((&v).Size()))
			n2, err := (&v).MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n2
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintAction(dAtA, i, uint64(m.AbilityID.Size()))
	n3, err := m.AbilityID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *PerformSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerformSource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for k, _ := range m.Targets {
			dAtA[i] = 0xa
			i++
			v := m.Targets[k]
			msgSize := 0
			if (&v) != nil {
				msgSize = (&v).Size()
				msgSize += 1 + sovAction(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovAction(uint64(len(k))) + msgSize
			i = encodeVarintAction(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAction(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintAction(dAtA, i, uint64((&v).Size()))
			n4, err := (&v).MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n4
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintAction(dAtA, i, uint64(m.AbilityID.Size()))
	n5, err := m.AbilityID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *PerformTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerformTarget) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAction(dAtA, i, uint64(m.Source.Size()))
	n6, err := m.Source.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x12
	i++
	i = encodeVarintAction(dAtA, i, uint64(m.AbilityID.Size()))
	n7, err := m.AbilityID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x1a
	i++
	i = encodeVarintAction(dAtA, i, uint64(m.ComponentID.Size()))
	n8, err := m.ComponentID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func (m *PerformFeedback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerformFeedback) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAction(dAtA, i, uint64(m.Target.Size()))
	n9, err := m.Target.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x12
	i++
	i = encodeVarintAction(dAtA, i, uint64(m.ID.Size()))
	n10, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	return i, nil
}

func (m *LootSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LootSource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAction(dAtA, i, uint64(m.TargetID.Size()))
	n11, err := m.TargetID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x12
	i++
	i = encodeVarintAction(dAtA, i, uint64(m.ItemID.Size()))
	n12, err := m.ItemID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	return i, nil
}

func (m *LootTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LootTarget) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAction(dAtA, i, uint64(m.Source.Size()))
	n13, err := m.Source.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x12
	i++
	i = encodeVarintAction(dAtA, i, uint64(m.ItemID.Size()))
	n14, err := m.ItemID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	return i, nil
}

func (m *LootFeedback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LootFeedback) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAction(dAtA, i, uint64(m.TargetID.Size()))
	n15, err := m.TargetID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	dAtA[i] = 0x12
	i++
	i = encodeVarintAction(dAtA, i, uint64(m.ItemID.Size()))
	n16, err := m.ItemID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	return i, nil
}

func (m *ConsumeSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumeSource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAction(dAtA, i, uint64(m.TargetID.Size()))
	n17, err := m.TargetID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	dAtA[i] = 0x12
	i++
	i = encodeVarintAction(dAtA, i, uint64(m.ItemID.Size()))
	n18, err := m.ItemID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	return i, nil
}

func (m *ConsumeTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumeTarget) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAction(dAtA, i, uint64(m.Source.Size()))
	n19, err := m.Source.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	dAtA[i] = 0x12
	i++
	i = encodeVarintAction(dAtA, i, uint64(m.ItemID.Size()))
	n20, err := m.ItemID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	return i, nil
}

func (m *ConsumeFeedback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumeFeedback) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAction(dAtA, i, uint64(m.TargetID.Size()))
	n21, err := m.TargetID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	dAtA[i] = 0x12
	i++
	i = encodeVarintAction(dAtA, i, uint64(m.ItemID.Size()))
	n22, err := m.ItemID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	return i, nil
}

func (m *Action) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Action) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cancel != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAction(dAtA, i, uint64(m.Cancel.Size()))
		n23, err := m.Cancel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.MoveTarget != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAction(dAtA, i, uint64(m.MoveTarget.Size()))
		n24, err := m.MoveTarget.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.CastSource != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAction(dAtA, i, uint64(m.CastSource.Size()))
		n25, err := m.CastSource.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.PerformSource != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAction(dAtA, i, uint64(m.PerformSource.Size()))
		n26, err := m.PerformSource.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.PerformTarget != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAction(dAtA, i, uint64(m.PerformTarget.Size()))
		n27, err := m.PerformTarget.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.PerformFeedback != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAction(dAtA, i, uint64(m.PerformFeedback.Size()))
		n28, err := m.PerformFeedback.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.LootSource != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAction(dAtA, i, uint64(m.LootSource.Size()))
		n29, err := m.LootSource.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.LootTarget != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAction(dAtA, i, uint64(m.LootTarget.Size()))
		n30, err := m.LootTarget.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.LootFeedback != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAction(dAtA, i, uint64(m.LootFeedback.Size()))
		n31, err := m.LootFeedback.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.ConsumeSource != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAction(dAtA, i, uint64(m.ConsumeSource.Size()))
		n32, err := m.ConsumeSource.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.ConsumeTarget != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAction(dAtA, i, uint64(m.ConsumeTarget.Size()))
		n33, err := m.ConsumeTarget.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.ConsumeFeedback != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintAction(dAtA, i, uint64(m.ConsumeFeedback.Size()))
		n34, err := m.ConsumeFeedback.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}

func encodeVarintAction(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedCancel(r randyAction, easy bool) *Cancel {
	this := &Cancel{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMoveTarget(r randyAction, easy bool) *MoveTarget {
	this := &MoveTarget{}
	v1 := geometry.NewPopulatedPosition(r, easy)
	this.Position = *v1
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCastSource(r randyAction, easy bool) *CastSource {
	this := &CastSource{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(10)
		this.Targets = make(map[string]ability.Targets)
		for i := 0; i < v2; i++ {
			this.Targets[randStringAction(r)] = *ability.NewPopulatedTargets(r, easy)
		}
	}
	v3 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.AbilityID = *v3
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPerformSource(r randyAction, easy bool) *PerformSource {
	this := &PerformSource{}
	if r.Intn(10) != 0 {
		v4 := r.Intn(10)
		this.Targets = make(map[string]ability.Targets)
		for i := 0; i < v4; i++ {
			this.Targets[randStringAction(r)] = *ability.NewPopulatedTargets(r, easy)
		}
	}
	v5 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.AbilityID = *v5
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPerformTarget(r randyAction, easy bool) *PerformTarget {
	this := &PerformTarget{}
	v6 := entity.NewPopulatedE(r, easy)
	this.Source = *v6
	v7 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.AbilityID = *v7
	v8 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.ComponentID = *v8
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPerformFeedback(r randyAction, easy bool) *PerformFeedback {
	this := &PerformFeedback{}
	v9 := entity.NewPopulatedE(r, easy)
	this.Target = *v9
	v10 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.ID = *v10
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLootSource(r randyAction, easy bool) *LootSource {
	this := &LootSource{}
	v11 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.TargetID = *v11
	v12 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.ItemID = *v12
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLootTarget(r randyAction, easy bool) *LootTarget {
	this := &LootTarget{}
	v13 := entity.NewPopulatedE(r, easy)
	this.Source = *v13
	v14 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.ItemID = *v14
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLootFeedback(r randyAction, easy bool) *LootFeedback {
	this := &LootFeedback{}
	v15 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.TargetID = *v15
	v16 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.ItemID = *v16
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedConsumeSource(r randyAction, easy bool) *ConsumeSource {
	this := &ConsumeSource{}
	v17 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.TargetID = *v17
	v18 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.ItemID = *v18
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedConsumeTarget(r randyAction, easy bool) *ConsumeTarget {
	this := &ConsumeTarget{}
	v19 := entity.NewPopulatedE(r, easy)
	this.Source = *v19
	v20 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.ItemID = *v20
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedConsumeFeedback(r randyAction, easy bool) *ConsumeFeedback {
	this := &ConsumeFeedback{}
	v21 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.TargetID = *v21
	v22 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.ItemID = *v22
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAction(r randyAction, easy bool) *Action {
	this := &Action{}
	fieldNum := r.Intn(12)
	switch fieldNum {
	case 0:
		this.Cancel = NewPopulatedCancel(r, easy)
	case 1:
		this.MoveTarget = NewPopulatedMoveTarget(r, easy)
	case 2:
		this.CastSource = NewPopulatedCastSource(r, easy)
	case 3:
		this.PerformSource = NewPopulatedPerformSource(r, easy)
	case 4:
		this.PerformTarget = NewPopulatedPerformTarget(r, easy)
	case 5:
		this.PerformFeedback = NewPopulatedPerformFeedback(r, easy)
	case 6:
		this.LootSource = NewPopulatedLootSource(r, easy)
	case 7:
		this.LootTarget = NewPopulatedLootTarget(r, easy)
	case 8:
		this.LootFeedback = NewPopulatedLootFeedback(r, easy)
	case 9:
		this.ConsumeSource = NewPopulatedConsumeSource(r, easy)
	case 10:
		this.ConsumeTarget = NewPopulatedConsumeTarget(r, easy)
	case 11:
		this.ConsumeFeedback = NewPopulatedConsumeFeedback(r, easy)
	}
	return this
}

type randyAction interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneAction(r randyAction) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringAction(r randyAction) string {
	v23 := r.Intn(100)
	tmps := make([]rune, v23)
	for i := 0; i < v23; i++ {
		tmps[i] = randUTF8RuneAction(r)
	}
	return string(tmps)
}
func randUnrecognizedAction(r randyAction, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldAction(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldAction(dAtA []byte, r randyAction, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateAction(dAtA, uint64(key))
		v24 := r.Int63()
		if r.Intn(2) == 0 {
			v24 *= -1
		}
		dAtA = encodeVarintPopulateAction(dAtA, uint64(v24))
	case 1:
		dAtA = encodeVarintPopulateAction(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateAction(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateAction(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateAction(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateAction(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Cancel) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MoveTarget) Size() (n int) {
	var l int
	_ = l
	l = m.Position.Size()
	n += 1 + l + sovAction(uint64(l))
	return n
}

func (m *CastSource) Size() (n int) {
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for k, v := range m.Targets {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovAction(uint64(len(k))) + 1 + l + sovAction(uint64(l))
			n += mapEntrySize + 1 + sovAction(uint64(mapEntrySize))
		}
	}
	l = m.AbilityID.Size()
	n += 1 + l + sovAction(uint64(l))
	return n
}

func (m *PerformSource) Size() (n int) {
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for k, v := range m.Targets {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovAction(uint64(len(k))) + 1 + l + sovAction(uint64(l))
			n += mapEntrySize + 1 + sovAction(uint64(mapEntrySize))
		}
	}
	l = m.AbilityID.Size()
	n += 1 + l + sovAction(uint64(l))
	return n
}

func (m *PerformTarget) Size() (n int) {
	var l int
	_ = l
	l = m.Source.Size()
	n += 1 + l + sovAction(uint64(l))
	l = m.AbilityID.Size()
	n += 1 + l + sovAction(uint64(l))
	l = m.ComponentID.Size()
	n += 1 + l + sovAction(uint64(l))
	return n
}

func (m *PerformFeedback) Size() (n int) {
	var l int
	_ = l
	l = m.Target.Size()
	n += 1 + l + sovAction(uint64(l))
	l = m.ID.Size()
	n += 1 + l + sovAction(uint64(l))
	return n
}

func (m *LootSource) Size() (n int) {
	var l int
	_ = l
	l = m.TargetID.Size()
	n += 1 + l + sovAction(uint64(l))
	l = m.ItemID.Size()
	n += 1 + l + sovAction(uint64(l))
	return n
}

func (m *LootTarget) Size() (n int) {
	var l int
	_ = l
	l = m.Source.Size()
	n += 1 + l + sovAction(uint64(l))
	l = m.ItemID.Size()
	n += 1 + l + sovAction(uint64(l))
	return n
}

func (m *LootFeedback) Size() (n int) {
	var l int
	_ = l
	l = m.TargetID.Size()
	n += 1 + l + sovAction(uint64(l))
	l = m.ItemID.Size()
	n += 1 + l + sovAction(uint64(l))
	return n
}

func (m *ConsumeSource) Size() (n int) {
	var l int
	_ = l
	l = m.TargetID.Size()
	n += 1 + l + sovAction(uint64(l))
	l = m.ItemID.Size()
	n += 1 + l + sovAction(uint64(l))
	return n
}

func (m *ConsumeTarget) Size() (n int) {
	var l int
	_ = l
	l = m.Source.Size()
	n += 1 + l + sovAction(uint64(l))
	l = m.ItemID.Size()
	n += 1 + l + sovAction(uint64(l))
	return n
}

func (m *ConsumeFeedback) Size() (n int) {
	var l int
	_ = l
	l = m.TargetID.Size()
	n += 1 + l + sovAction(uint64(l))
	l = m.ItemID.Size()
	n += 1 + l + sovAction(uint64(l))
	return n
}

func (m *Action) Size() (n int) {
	var l int
	_ = l
	if m.Cancel != nil {
		l = m.Cancel.Size()
		n += 1 + l + sovAction(uint64(l))
	}
	if m.MoveTarget != nil {
		l = m.MoveTarget.Size()
		n += 1 + l + sovAction(uint64(l))
	}
	if m.CastSource != nil {
		l = m.CastSource.Size()
		n += 1 + l + sovAction(uint64(l))
	}
	if m.PerformSource != nil {
		l = m.PerformSource.Size()
		n += 1 + l + sovAction(uint64(l))
	}
	if m.PerformTarget != nil {
		l = m.PerformTarget.Size()
		n += 1 + l + sovAction(uint64(l))
	}
	if m.PerformFeedback != nil {
		l = m.PerformFeedback.Size()
		n += 1 + l + sovAction(uint64(l))
	}
	if m.LootSource != nil {
		l = m.LootSource.Size()
		n += 1 + l + sovAction(uint64(l))
	}
	if m.LootTarget != nil {
		l = m.LootTarget.Size()
		n += 1 + l + sovAction(uint64(l))
	}
	if m.LootFeedback != nil {
		l = m.LootFeedback.Size()
		n += 1 + l + sovAction(uint64(l))
	}
	if m.ConsumeSource != nil {
		l = m.ConsumeSource.Size()
		n += 1 + l + sovAction(uint64(l))
	}
	if m.ConsumeTarget != nil {
		l = m.ConsumeTarget.Size()
		n += 1 + l + sovAction(uint64(l))
	}
	if m.ConsumeFeedback != nil {
		l = m.ConsumeFeedback.Size()
		n += 1 + l + sovAction(uint64(l))
	}
	return n
}

func sovAction(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAction(x uint64) (n int) {
	return sovAction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Cancel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cancel{`,
		`}`,
	}, "")
	return s
}
func (this *MoveTarget) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MoveTarget{`,
		`Position:` + strings.Replace(strings.Replace(this.Position.String(), "Position", "geometry.Position", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CastSource) String() string {
	if this == nil {
		return "nil"
	}
	keysForTargets := make([]string, 0, len(this.Targets))
	for k, _ := range this.Targets {
		keysForTargets = append(keysForTargets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTargets)
	mapStringForTargets := "map[string]ability.Targets{"
	for _, k := range keysForTargets {
		mapStringForTargets += fmt.Sprintf("%v: %v,", k, this.Targets[k])
	}
	mapStringForTargets += "}"
	s := strings.Join([]string{`&CastSource{`,
		`Targets:` + mapStringForTargets + `,`,
		`AbilityID:` + fmt.Sprintf("%v", this.AbilityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerformSource) String() string {
	if this == nil {
		return "nil"
	}
	keysForTargets := make([]string, 0, len(this.Targets))
	for k, _ := range this.Targets {
		keysForTargets = append(keysForTargets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTargets)
	mapStringForTargets := "map[string]ability.Targets{"
	for _, k := range keysForTargets {
		mapStringForTargets += fmt.Sprintf("%v: %v,", k, this.Targets[k])
	}
	mapStringForTargets += "}"
	s := strings.Join([]string{`&PerformSource{`,
		`Targets:` + mapStringForTargets + `,`,
		`AbilityID:` + fmt.Sprintf("%v", this.AbilityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerformTarget) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerformTarget{`,
		`Source:` + strings.Replace(strings.Replace(this.Source.String(), "E", "entity.E", 1), `&`, ``, 1) + `,`,
		`AbilityID:` + fmt.Sprintf("%v", this.AbilityID) + `,`,
		`ComponentID:` + fmt.Sprintf("%v", this.ComponentID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PerformFeedback) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PerformFeedback{`,
		`Target:` + strings.Replace(strings.Replace(this.Target.String(), "E", "entity.E", 1), `&`, ``, 1) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LootSource) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LootSource{`,
		`TargetID:` + fmt.Sprintf("%v", this.TargetID) + `,`,
		`ItemID:` + fmt.Sprintf("%v", this.ItemID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LootTarget) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LootTarget{`,
		`Source:` + strings.Replace(strings.Replace(this.Source.String(), "E", "entity.E", 1), `&`, ``, 1) + `,`,
		`ItemID:` + fmt.Sprintf("%v", this.ItemID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LootFeedback) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LootFeedback{`,
		`TargetID:` + fmt.Sprintf("%v", this.TargetID) + `,`,
		`ItemID:` + fmt.Sprintf("%v", this.ItemID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConsumeSource) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConsumeSource{`,
		`TargetID:` + fmt.Sprintf("%v", this.TargetID) + `,`,
		`ItemID:` + fmt.Sprintf("%v", this.ItemID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConsumeTarget) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConsumeTarget{`,
		`Source:` + strings.Replace(strings.Replace(this.Source.String(), "E", "entity.E", 1), `&`, ``, 1) + `,`,
		`ItemID:` + fmt.Sprintf("%v", this.ItemID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConsumeFeedback) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConsumeFeedback{`,
		`TargetID:` + fmt.Sprintf("%v", this.TargetID) + `,`,
		`ItemID:` + fmt.Sprintf("%v", this.ItemID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Action) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Action{`,
		`Cancel:` + strings.Replace(fmt.Sprintf("%v", this.Cancel), "Cancel", "Cancel", 1) + `,`,
		`MoveTarget:` + strings.Replace(fmt.Sprintf("%v", this.MoveTarget), "MoveTarget", "MoveTarget", 1) + `,`,
		`CastSource:` + strings.Replace(fmt.Sprintf("%v", this.CastSource), "CastSource", "CastSource", 1) + `,`,
		`PerformSource:` + strings.Replace(fmt.Sprintf("%v", this.PerformSource), "PerformSource", "PerformSource", 1) + `,`,
		`PerformTarget:` + strings.Replace(fmt.Sprintf("%v", this.PerformTarget), "PerformTarget", "PerformTarget", 1) + `,`,
		`PerformFeedback:` + strings.Replace(fmt.Sprintf("%v", this.PerformFeedback), "PerformFeedback", "PerformFeedback", 1) + `,`,
		`LootSource:` + strings.Replace(fmt.Sprintf("%v", this.LootSource), "LootSource", "LootSource", 1) + `,`,
		`LootTarget:` + strings.Replace(fmt.Sprintf("%v", this.LootTarget), "LootTarget", "LootTarget", 1) + `,`,
		`LootFeedback:` + strings.Replace(fmt.Sprintf("%v", this.LootFeedback), "LootFeedback", "LootFeedback", 1) + `,`,
		`ConsumeSource:` + strings.Replace(fmt.Sprintf("%v", this.ConsumeSource), "ConsumeSource", "ConsumeSource", 1) + `,`,
		`ConsumeTarget:` + strings.Replace(fmt.Sprintf("%v", this.ConsumeTarget), "ConsumeTarget", "ConsumeTarget", 1) + `,`,
		`ConsumeFeedback:` + strings.Replace(fmt.Sprintf("%v", this.ConsumeFeedback), "ConsumeFeedback", "ConsumeFeedback", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAction(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (this *Action) GetValue() interface{} {
	if this.Cancel != nil {
		return this.Cancel
	}
	if this.MoveTarget != nil {
		return this.MoveTarget
	}
	if this.CastSource != nil {
		return this.CastSource
	}
	if this.PerformSource != nil {
		return this.PerformSource
	}
	if this.PerformTarget != nil {
		return this.PerformTarget
	}
	if this.PerformFeedback != nil {
		return this.PerformFeedback
	}
	if this.LootSource != nil {
		return this.LootSource
	}
	if this.LootTarget != nil {
		return this.LootTarget
	}
	if this.LootFeedback != nil {
		return this.LootFeedback
	}
	if this.ConsumeSource != nil {
		return this.ConsumeSource
	}
	if this.ConsumeTarget != nil {
		return this.ConsumeTarget
	}
	if this.ConsumeFeedback != nil {
		return this.ConsumeFeedback
	}
	return nil
}

func (this *Action) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *Cancel:
		this.Cancel = vt
	case *MoveTarget:
		this.MoveTarget = vt
	case *CastSource:
		this.CastSource = vt
	case *PerformSource:
		this.PerformSource = vt
	case *PerformTarget:
		this.PerformTarget = vt
	case *PerformFeedback:
		this.PerformFeedback = vt
	case *LootSource:
		this.LootSource = vt
	case *LootTarget:
		this.LootTarget = vt
	case *LootFeedback:
		this.LootFeedback = vt
	case *ConsumeSource:
		this.ConsumeSource = vt
	case *ConsumeTarget:
		this.ConsumeTarget = vt
	case *ConsumeFeedback:
		this.ConsumeFeedback = vt
	default:
		return false
	}
	return true
}
func (m *Cancel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cancel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cancel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoveTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveTarget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveTarget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CastSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CastSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CastSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Targets == nil {
				m.Targets = make(map[string]ability.Targets)
			}
			var mapkey string
			mapvalue := &ability.Targets{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAction
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAction
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthAction
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ability.Targets{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAction(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAction
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Targets[mapkey] = *mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AbilityID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerformSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerformSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerformSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Targets == nil {
				m.Targets = make(map[string]ability.Targets)
			}
			var mapkey string
			mapvalue := &ability.Targets{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAction
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAction
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthAction
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ability.Targets{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAction(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAction
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Targets[mapkey] = *mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AbilityID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerformTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerformTarget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerformTarget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AbilityID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ComponentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerformFeedback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerformFeedback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerformFeedback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LootSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LootSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LootSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TargetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ItemID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LootTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LootTarget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LootTarget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ItemID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LootFeedback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LootFeedback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LootFeedback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TargetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ItemID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumeSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumeSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumeSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TargetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ItemID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumeTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumeTarget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumeTarget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ItemID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumeFeedback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumeFeedback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumeFeedback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TargetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ItemID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Action) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Action: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Action: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cancel == nil {
				m.Cancel = &Cancel{}
			}
			if err := m.Cancel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoveTarget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoveTarget == nil {
				m.MoveTarget = &MoveTarget{}
			}
			if err := m.MoveTarget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CastSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CastSource == nil {
				m.CastSource = &CastSource{}
			}
			if err := m.CastSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformSource == nil {
				m.PerformSource = &PerformSource{}
			}
			if err := m.PerformSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformTarget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformTarget == nil {
				m.PerformTarget = &PerformTarget{}
			}
			if err := m.PerformTarget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformFeedback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformFeedback == nil {
				m.PerformFeedback = &PerformFeedback{}
			}
			if err := m.PerformFeedback.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LootSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LootSource == nil {
				m.LootSource = &LootSource{}
			}
			if err := m.LootSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LootTarget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LootTarget == nil {
				m.LootTarget = &LootTarget{}
			}
			if err := m.LootTarget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LootFeedback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LootFeedback == nil {
				m.LootFeedback = &LootFeedback{}
			}
			if err := m.LootFeedback.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumeSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsumeSource == nil {
				m.ConsumeSource = &ConsumeSource{}
			}
			if err := m.ConsumeSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumeTarget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsumeTarget == nil {
				m.ConsumeTarget = &ConsumeTarget{}
			}
			if err := m.ConsumeTarget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumeFeedback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsumeFeedback == nil {
				m.ConsumeFeedback = &ConsumeFeedback{}
			}
			if err := m.ConsumeFeedback.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAction
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAction
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAction(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAction = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAction   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("action.proto", fileDescriptor_action_98c97669884f4595) }

var fileDescriptor_action_98c97669884f4595 = []byte{
	// 778 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xcf, 0x6b, 0x13, 0x4f,
	0x14, 0xcf, 0xa4, 0xcd, 0x36, 0x79, 0x49, 0x48, 0xbf, 0xfb, 0x15, 0x59, 0x72, 0x98, 0xd6, 0x40,
	0xb5, 0x97, 0x6e, 0x4c, 0xab, 0x58, 0x02, 0x4a, 0x9b, 0xa4, 0x42, 0xb0, 0x62, 0x59, 0xbd, 0xcb,
	0x66, 0x3b, 0x4d, 0xd7, 0xee, 0xee, 0x84, 0x64, 0x52, 0x08, 0x08, 0xfa, 0x27, 0xf8, 0x17, 0x48,
	0xc5, 0x8b, 0x27, 0xcf, 0x1e, 0x3d, 0xf6, 0xd8, 0x93, 0x88, 0x87, 0x62, 0xd6, 0x83, 0x5e, 0x84,
	0x1e, 0x3d, 0x4a, 0x66, 0x67, 0xb3, 0x3f, 0x5a, 0x0b, 0x2d, 0x05, 0xeb, 0x29, 0xbb, 0xfb, 0xe6,
	0xf3, 0xde, 0xfb, 0xbc, 0x37, 0xef, 0xf3, 0x02, 0x39, 0xdd, 0x60, 0x26, 0x75, 0xd4, 0x4e, 0x97,
	0x32, 0x2a, 0xa7, 0xc8, 0x2e, 0x71, 0x58, 0x71, 0xa1, 0x6d, 0xb2, 0xed, 0x7e, 0x4b, 0x35, 0xa8,
	0x5d, 0x6e, 0xd3, 0x36, 0x2d, 0x73, 0x6b, 0xab, 0xbf, 0xc5, 0xdf, 0xf8, 0x0b, 0x7f, 0xf2, 0x50,
	0xc5, 0xdb, 0xa1, 0xe3, 0xc4, 0xa2, 0xcf, 0xf4, 0xed, 0x72, 0x5b, 0xb7, 0xc9, 0xd3, 0x9b, 0x95,
	0x72, 0x67, 0xa7, 0x5d, 0x6e, 0x13, 0x6a, 0x13, 0xd6, 0x1d, 0x94, 0x3b, 0xb4, 0x67, 0x06, 0xc1,
	0x8a, 0x4b, 0xa7, 0xc3, 0xf4, 0x96, 0x69, 0x99, 0x6c, 0x50, 0x66, 0x7a, 0xb7, 0x4d, 0x58, 0x4f,
	0x80, 0x2a, 0xa7, 0x83, 0x88, 0xc3, 0x46, 0x18, 0xef, 0xc7, 0x83, 0x94, 0xd2, 0x20, 0xd5, 0x75,
	0xc7, 0x20, 0x56, 0xa9, 0x06, 0xf0, 0x90, 0xee, 0x92, 0x27, 0xdc, 0xa3, 0x7c, 0x0b, 0xd2, 0x1b,
	0x22, 0x23, 0x05, 0xcd, 0xa2, 0xf9, 0xec, 0xa2, 0xac, 0xfa, 0xb9, 0xaa, 0xbe, 0xa5, 0x36, 0xb9,
	0x7f, 0x38, 0x93, 0xd0, 0xd2, 0x7e, 0xee, 0xa5, 0xef, 0x08, 0xa0, 0xae, 0xf7, 0xd8, 0x63, 0xda,
	0xef, 0x1a, 0x44, 0xbe, 0x07, 0x53, 0x9e, 0xbb, 0x9e, 0x82, 0x66, 0x27, 0xe6, 0xb3, 0x8b, 0x58,
	0xe5, 0x35, 0x54, 0x83, 0x33, 0xaa, 0x38, 0xb0, 0xe6, 0xb0, 0xee, 0x40, 0xf8, 0x9b, 0x12, 0xac,
	0xe4, 0x07, 0x90, 0x59, 0xf5, 0x88, 0x36, 0x1b, 0x4a, 0x72, 0x16, 0xcd, 0xe7, 0x6a, 0x0b, 0xa3,
	0x13, 0x5f, 0x0e, 0x67, 0xe6, 0x4e, 0xa7, 0xda, 0xb7, 0xcc, 0x4d, 0xb5, 0xd9, 0xd0, 0x32, 0xba,
	0x8f, 0x2f, 0xae, 0x43, 0x2e, 0x1c, 0x4b, 0x9e, 0x86, 0x89, 0x1d, 0x32, 0xe0, 0xe4, 0x32, 0xda,
	0xe8, 0x51, 0xbe, 0x0e, 0xa9, 0x5d, 0xdd, 0xea, 0x13, 0x1e, 0x2a, 0xbb, 0x38, 0xad, 0x0a, 0xb0,
	0x9f, 0xa3, 0xe6, 0x99, 0xab, 0xc9, 0x65, 0x54, 0xfa, 0x89, 0x20, 0xbf, 0x41, 0xba, 0x5b, 0xb4,
	0x6b, 0x0b, 0xb2, 0xab, 0x71, 0xb2, 0xd7, 0x04, 0xd9, 0xc8, 0xb1, 0x7f, 0x95, 0xef, 0xa7, 0x80,
	0xaf, 0xb8, 0x21, 0x37, 0x40, 0xf2, 0x28, 0x89, 0xfb, 0x91, 0x51, 0xc5, 0xc5, 0x5a, 0x13, 0xb4,
	0xa4, 0x9e, 0x57, 0x98, 0x8b, 0x64, 0x25, 0x3f, 0x82, 0x6c, 0x9d, 0xda, 0x1d, 0xea, 0x10, 0x87,
	0x35, 0x1b, 0xca, 0xc4, 0x79, 0xdc, 0x65, 0x8d, 0xc0, 0x43, 0x69, 0x00, 0x05, 0xc1, 0xeb, 0x3e,
	0x21, 0x9b, 0x2d, 0xdd, 0xd8, 0x19, 0x31, 0xf3, 0x38, 0xfe, 0x91, 0x99, 0xd7, 0x30, 0xf9, 0x2e,
	0x24, 0xcf, 0x4b, 0x29, 0x69, 0x36, 0x4a, 0xaf, 0x11, 0xc0, 0x3a, 0xa5, 0xfe, 0xb4, 0x34, 0x21,
	0xed, 0x85, 0x6d, 0x36, 0x78, 0xe0, 0x33, 0xfb, 0x4c, 0x33, 0x01, 0x97, 0xd7, 0x40, 0x6a, 0x32,
	0x62, 0x9f, 0x37, 0x39, 0xc9, 0xe4, 0xe0, 0xd2, 0x73, 0x2f, 0xbf, 0xb3, 0x36, 0xfc, 0x82, 0xa2,
	0xef, 0x21, 0xc8, 0x8d, 0xc2, 0x8f, 0xfb, 0x72, 0xf9, 0x0a, 0xf4, 0x06, 0x41, 0xbe, 0x4e, 0x9d,
	0x5e, 0xdf, 0x26, 0x97, 0xb6, 0x89, 0x2f, 0xc6, 0x29, 0xfe, 0xa5, 0x3e, 0xbe, 0x45, 0x50, 0x10,
	0x19, 0x5c, 0xe2, 0x56, 0xbe, 0x4f, 0x81, 0xb4, 0xca, 0xd7, 0xbd, 0x3c, 0xe7, 0xef, 0x44, 0x51,
	0xa0, 0xfc, 0x78, 0x6b, 0x8d, 0x3e, 0x6a, 0x92, 0xc1, 0x7f, 0xe5, 0x4a, 0x78, 0x61, 0x0a, 0x0d,
	0xfd, 0x4f, 0x1c, 0x0d, 0x0c, 0x1a, 0xd8, 0xc1, 0x56, 0xad, 0x84, 0xd7, 0x23, 0x17, 0xaf, 0x00,
	0x12, 0x18, 0x34, 0x30, 0x82, 0x1d, 0x5a, 0x8d, 0xed, 0x19, 0x65, 0x92, 0xa3, 0xae, 0x9c, 0xb4,
	0x5c, 0xb4, 0x7c, 0x27, 0xb2, 0x92, 0xaa, 0x31, 0xcd, 0x56, 0x52, 0x27, 0x61, 0x45, 0x9e, 0x3e,
	0x56, 0xa4, 0xba, 0x72, 0x4c, 0x17, 0x15, 0x89, 0xa3, 0xaf, 0x46, 0xd1, 0xbe, 0x55, 0x2b, 0x74,
	0x62, 0x32, 0x5a, 0x09, 0xab, 0x9b, 0x32, 0x15, 0x21, 0x1b, 0x18, 0x34, 0xb0, 0x02, 0x09, 0xac,
	0x84, 0x05, 0x47, 0x49, 0x1f, 0x83, 0xf8, 0x25, 0xb5, 0x02, 0x55, 0xba, 0x13, 0x15, 0x09, 0x25,
	0xc3, 0x41, 0xff, 0x87, 0x40, 0xe3, 0x0c, 0x73, 0x56, 0x58, 0x4d, 0xaa, 0xb1, 0xd1, 0x55, 0x20,
	0x52, 0x9c, 0x88, 0x4d, 0xcb, 0x1b, 0x91, 0x29, 0xaf, 0xc6, 0x66, 0x4a, 0xc9, 0x9e, 0x84, 0xf5,
	0x0b, 0x6b, 0x44, 0xc6, 0x6f, 0xe5, 0xd8, 0x34, 0x28, 0xb9, 0x48, 0x61, 0x63, 0x56, 0xad, 0x60,
	0x44, 0x3f, 0x54, 0x27, 0xf7, 0xf7, 0x66, 0x50, 0x6d, 0xf9, 0x60, 0x88, 0x13, 0x9f, 0x87, 0x38,
	0x71, 0x34, 0xc4, 0xe8, 0xd7, 0x10, 0xa3, 0x97, 0x2e, 0x46, 0xef, 0x5c, 0x8c, 0x3e, 0xb8, 0x18,
	0x7d, 0x74, 0x31, 0xda, 0x77, 0x31, 0x3a, 0x70, 0x31, 0xfa, 0xea, 0x62, 0xf4, 0xc3, 0xc5, 0x89,
	0x23, 0x17, 0xa3, 0x57, 0xdf, 0x70, 0xa2, 0x25, 0xf1, 0xbf, 0x7e, 0x4b, 0xbf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x21, 0xee, 0xdc, 0x4c, 0xdf, 0x0a, 0x00, 0x00,
}

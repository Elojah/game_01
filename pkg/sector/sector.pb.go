// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sector.proto

package sector

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import geometry "github.com/elojah/game_01/pkg/geometry"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_elojah_game_01_pkg_ulid "github.com/elojah/game_01/pkg/ulid"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type S struct {
	ID                   github_com_elojah_game_01_pkg_ulid.ID   `protobuf:"bytes,1,opt,name=ID,json=iD,proto3,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"ID"`
	Dim                  geometry.Vec3                           `protobuf:"bytes,2,opt,name=Dim,json=dim" json:"Dim"`
	Exposed              []github_com_elojah_game_01_pkg_ulid.ID `protobuf:"bytes,3,rep,name=Exposed,json=exposed,customtype=github.com/elojah/game_01/pkg/ulid.ID" json:"Exposed"`
	Neighbours           map[string]geometry.Vec3                `protobuf:"bytes,4,rep,name=Neighbours,json=neighbours" json:"Neighbours" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *S) Reset()      { *m = S{} }
func (*S) ProtoMessage() {}
func (*S) Descriptor() ([]byte, []int) {
	return fileDescriptor_sector_10278d3a25c5d502, []int{0}
}
func (m *S) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *S) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S.Merge(dst, src)
}
func (m *S) XXX_Size() int {
	return m.Size()
}
func (m *S) XXX_DiscardUnknown() {
	xxx_messageInfo_S.DiscardUnknown(m)
}

var xxx_messageInfo_S proto.InternalMessageInfo

func (m *S) GetDim() geometry.Vec3 {
	if m != nil {
		return m.Dim
	}
	return geometry.Vec3{}
}

func (m *S) GetNeighbours() map[string]geometry.Vec3 {
	if m != nil {
		return m.Neighbours
	}
	return nil
}

func init() {
	proto.RegisterType((*S)(nil), "sector.S")
	proto.RegisterMapType((map[string]geometry.Vec3)(nil), "sector.S.NeighboursEntry")
}
func (this *S) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*S)
	if !ok {
		that2, ok := that.(S)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.Dim.Equal(&that1.Dim) {
		return false
	}
	if len(this.Exposed) != len(that1.Exposed) {
		return false
	}
	for i := range this.Exposed {
		if !this.Exposed[i].Equal(that1.Exposed[i]) {
			return false
		}
	}
	if len(this.Neighbours) != len(that1.Neighbours) {
		return false
	}
	for i := range this.Neighbours {
		a := this.Neighbours[i]
		b := that1.Neighbours[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	return true
}
func (this *S) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&sector.S{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Dim: "+strings.Replace(this.Dim.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Exposed: "+fmt.Sprintf("%#v", this.Exposed)+",\n")
	keysForNeighbours := make([]string, 0, len(this.Neighbours))
	for k, _ := range this.Neighbours {
		keysForNeighbours = append(keysForNeighbours, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForNeighbours)
	mapStringForNeighbours := "map[string]geometry.Vec3{"
	for _, k := range keysForNeighbours {
		mapStringForNeighbours += fmt.Sprintf("%#v: %#v,", k, this.Neighbours[k])
	}
	mapStringForNeighbours += "}"
	if this.Neighbours != nil {
		s = append(s, "Neighbours: "+mapStringForNeighbours+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSector(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *S) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSector(dAtA, i, uint64(m.ID.Size()))
	n1, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintSector(dAtA, i, uint64(m.Dim.Size()))
	n2, err := m.Dim.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Exposed) > 0 {
		for _, msg := range m.Exposed {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSector(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Neighbours) > 0 {
		for k, _ := range m.Neighbours {
			dAtA[i] = 0x22
			i++
			v := m.Neighbours[k]
			msgSize := 0
			if (&v) != nil {
				msgSize = (&v).Size()
				msgSize += 1 + sovSector(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovSector(uint64(len(k))) + msgSize
			i = encodeVarintSector(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSector(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintSector(dAtA, i, uint64((&v).Size()))
			n3, err := (&v).MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n3
		}
	}
	return i, nil
}

func encodeVarintSector(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedS(r randySector, easy bool) *S {
	this := &S{}
	v1 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
	this.ID = *v1
	v2 := geometry.NewPopulatedVec3(r, easy)
	this.Dim = *v2
	v3 := r.Intn(10)
	this.Exposed = make([]github_com_elojah_game_01_pkg_ulid.ID, v3)
	for i := 0; i < v3; i++ {
		v4 := github_com_elojah_game_01_pkg_ulid.NewPopulatedID(r)
		this.Exposed[i] = *v4
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(10)
		this.Neighbours = make(map[string]geometry.Vec3)
		for i := 0; i < v5; i++ {
			this.Neighbours[randStringSector(r)] = *geometry.NewPopulatedVec3(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randySector interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSector(r randySector) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSector(r randySector) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneSector(r)
	}
	return string(tmps)
}
func randUnrecognizedSector(r randySector, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldSector(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldSector(dAtA []byte, r randySector, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateSector(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateSector(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateSector(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateSector(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateSector(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateSector(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateSector(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *S) Size() (n int) {
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovSector(uint64(l))
	l = m.Dim.Size()
	n += 1 + l + sovSector(uint64(l))
	if len(m.Exposed) > 0 {
		for _, e := range m.Exposed {
			l = e.Size()
			n += 1 + l + sovSector(uint64(l))
		}
	}
	if len(m.Neighbours) > 0 {
		for k, v := range m.Neighbours {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovSector(uint64(len(k))) + 1 + l + sovSector(uint64(l))
			n += mapEntrySize + 1 + sovSector(uint64(mapEntrySize))
		}
	}
	return n
}

func sovSector(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSector(x uint64) (n int) {
	return sovSector(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *S) String() string {
	if this == nil {
		return "nil"
	}
	keysForNeighbours := make([]string, 0, len(this.Neighbours))
	for k, _ := range this.Neighbours {
		keysForNeighbours = append(keysForNeighbours, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForNeighbours)
	mapStringForNeighbours := "map[string]geometry.Vec3{"
	for _, k := range keysForNeighbours {
		mapStringForNeighbours += fmt.Sprintf("%v: %v,", k, this.Neighbours[k])
	}
	mapStringForNeighbours += "}"
	s := strings.Join([]string{`&S{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Dim:` + strings.Replace(strings.Replace(this.Dim.String(), "Vec3", "geometry.Vec3", 1), `&`, ``, 1) + `,`,
		`Exposed:` + fmt.Sprintf("%v", this.Exposed) + `,`,
		`Neighbours:` + mapStringForNeighbours + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSector(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *S) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSector
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSector
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Dim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exposed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSector
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_elojah_game_01_pkg_ulid.ID
			m.Exposed = append(m.Exposed, v)
			if err := m.Exposed[len(m.Exposed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Neighbours", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSector
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Neighbours == nil {
				m.Neighbours = make(map[string]geometry.Vec3)
			}
			var mapkey string
			mapvalue := &geometry.Vec3{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSector
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSector
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSector
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSector
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSector
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthSector
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &geometry.Vec3{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSector(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSector
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Neighbours[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSector(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSector
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSector
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSector
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSector(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSector = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSector   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sector.proto", fileDescriptor_sector_10278d3a25c5d502) }

var fileDescriptor_sector_10278d3a25c5d502 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0x4d, 0x2e,
	0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0xa4, 0x74, 0xd3, 0x33,
	0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3, 0xd3, 0xf3, 0xf5, 0xc1, 0xd2,
	0x49, 0xa5, 0x69, 0x60, 0x1e, 0x98, 0x03, 0x66, 0x41, 0xb4, 0x49, 0x99, 0x22, 0x29, 0x4f, 0xcd,
	0xc9, 0xcf, 0x4a, 0xcc, 0xd0, 0x4f, 0x4f, 0xcc, 0x4d, 0x8d, 0x37, 0x30, 0xd4, 0x2f, 0xc8, 0x4e,
	0xd7, 0x4f, 0x4f, 0xcd, 0xcf, 0x4d, 0x2d, 0x29, 0xaa, 0xd4, 0x2f, 0xc8, 0x2f, 0xce, 0x2c, 0xc9,
	0xcc, 0xcf, 0x83, 0x68, 0x53, 0x3a, 0xcc, 0xc4, 0xc5, 0x18, 0x2c, 0x64, 0xcb, 0xc5, 0xe4, 0xe9,
	0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0xe3, 0xa4, 0x7b, 0xe2, 0x9e, 0x3c, 0xc3, 0xad, 0x7b, 0xf2,
	0xaa, 0xf8, 0x0d, 0x2c, 0xcd, 0xc9, 0x4c, 0xd1, 0xf3, 0x74, 0x09, 0x62, 0xca, 0x74, 0x11, 0x52,
	0xe3, 0x62, 0x76, 0xc9, 0xcc, 0x95, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x36, 0xe2, 0xd3, 0x83, 0xd9,
	0xa5, 0x17, 0x96, 0x9a, 0x6c, 0xec, 0xc4, 0x02, 0x32, 0x2f, 0x88, 0x39, 0x25, 0x33, 0x57, 0xc8,
	0x9d, 0x8b, 0xdd, 0xb5, 0xa2, 0x20, 0xbf, 0x38, 0x35, 0x45, 0x82, 0x59, 0x81, 0x99, 0x74, 0xbb,
	0xd8, 0x53, 0x21, 0xba, 0x85, 0xec, 0xb9, 0xb8, 0xfc, 0x52, 0x33, 0xd3, 0x33, 0x92, 0xf2, 0x4b,
	0x8b, 0x8a, 0x25, 0x58, 0x14, 0x98, 0x35, 0xb8, 0x8d, 0x24, 0xf5, 0xa0, 0xc1, 0x18, 0xac, 0x87,
	0x90, 0x73, 0xcd, 0x2b, 0x29, 0xaa, 0x84, 0x3a, 0x81, 0x2b, 0x0f, 0x2e, 0x2c, 0xe5, 0xcb, 0xc5,
	0x8f, 0xa6, 0x48, 0x48, 0x80, 0x8b, 0x39, 0x3b, 0xb5, 0x12, 0x1c, 0x08, 0x9c, 0x41, 0x20, 0xa6,
	0x90, 0x0a, 0x17, 0x6b, 0x59, 0x62, 0x4e, 0x69, 0x2a, 0x76, 0x8f, 0x05, 0x41, 0x24, 0xad, 0x98,
	0x2c, 0x18, 0x9d, 0x2c, 0x2e, 0x3c, 0x94, 0x63, 0xb8, 0xf1, 0x50, 0x8e, 0xe1, 0xc3, 0x43, 0x39,
	0xc6, 0x1f, 0x0f, 0xe5, 0x18, 0x1b, 0x1e, 0xc9, 0x31, 0xae, 0x78, 0x24, 0xc7, 0xb8, 0xe3, 0x91,
	0x1c, 0xe3, 0x81, 0x47, 0x72, 0x8c, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0,
	0x91, 0x1c, 0xe3, 0x8b, 0x47, 0x72, 0x0c, 0x1f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x90,
	0xc4, 0x06, 0x8e, 0x06, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x40, 0x0d, 0x63, 0x04,
	0x02, 0x00, 0x00,
}
